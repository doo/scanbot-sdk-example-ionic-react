{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nvar DB_NAME = 'workbox-expiration';\nvar OBJECT_STORE_NAME = 'cache-entries';\nvar normalizeURL = function normalizeURL(unNormalizedUrl) {\n  var url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nvar CacheTimestampsModel = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  function CacheTimestampsModel(cacheName) {\n    var _this = this;\n    _classCallCheck(this, CacheTimestampsModel);\n    this._cacheName = cacheName;\n    this._db = new DBWrapper(DB_NAME, 1, {\n      onupgradeneeded: function onupgradeneeded(event) {\n        return _this._handleUpgrade(event);\n      }\n    });\n  }\n  /**\n   * Should perform an upgrade of indexedDB.\n   *\n   * @param {Event} event\n   *\n   * @private\n   */\n  _createClass(CacheTimestampsModel, [{\n    key: \"_handleUpgrade\",\n    value: function _handleUpgrade(event) {\n      var db = event.target.result;\n      // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n      // have to use the `id` keyPath here and create our own values (a\n      // concatenation of `url + cacheName`) instead of simply using\n      // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n      var objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n        keyPath: 'id'\n      });\n      // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n      // create a single index with the keyPath `['cacheName', 'timestamp']`\n      // instead of doing both these indexes.\n      objStore.createIndex('cacheName', 'cacheName', {\n        unique: false\n      });\n      objStore.createIndex('timestamp', 'timestamp', {\n        unique: false\n      });\n      // Previous versions of `workbox-expiration` used `this._cacheName`\n      // as the IDBDatabase name.\n      deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n  }, {\n    key: \"setTimestamp\",\n    value: function () {\n      var _setTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, timestamp) {\n        var entry;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              url = normalizeURL(url);\n              entry = {\n                url: url,\n                timestamp: timestamp,\n                cacheName: this._cacheName,\n                // Creating an ID from the URL and cache name won't be necessary once\n                // Edge switches to Chromium and all browsers we support work with\n                // array keyPaths.\n                id: this._getId(url)\n              };\n              _context.next = 4;\n              return this._db.put(OBJECT_STORE_NAME, entry);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function setTimestamp(_x, _x2) {\n        return _setTimestamp.apply(this, arguments);\n      }\n      return setTimestamp;\n    }()\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n  }, {\n    key: \"getTimestamp\",\n    value: function () {\n      var _getTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        var entry;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._db.get(OBJECT_STORE_NAME, this._getId(url));\n            case 2:\n              entry = _context2.sent;\n              return _context2.abrupt(\"return\", entry.timestamp);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getTimestamp(_x3) {\n        return _getTimestamp.apply(this, arguments);\n      }\n      return getTimestamp;\n    }()\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n  }, {\n    key: \"expireEntries\",\n    value: function () {\n      var _expireEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(minTimestamp, maxCount) {\n        var _this2 = this;\n        var entriesToDelete, urlsDeleted, _iterator, _step, entry;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this._db.transaction(OBJECT_STORE_NAME, 'readwrite', function (txn, done) {\n                var store = txn.objectStore(OBJECT_STORE_NAME);\n                var request = store.index('timestamp').openCursor(null, 'prev');\n                var entriesToDelete = [];\n                var entriesNotDeletedCount = 0;\n                request.onsuccess = function () {\n                  var cursor = request.result;\n                  if (cursor) {\n                    var result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === _this2._cacheName) {\n                      // Delete an entry if it's older than the max age or\n                      // if we already have the max number allowed.\n                      if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                        // TODO(philipwalton): we should be able to delete the\n                        // entry right here, but doing so causes an iteration\n                        // bug in Safari stable (fixed in TP). Instead we can\n                        // store the keys of the entries to delete, and then\n                        // delete the separate transactions.\n                        // https://github.com/GoogleChrome/workbox/issues/1978\n                        // cursor.delete();\n                        // We only need to return the URL, not the whole entry.\n                        entriesToDelete.push(cursor.value);\n                      } else {\n                        entriesNotDeletedCount++;\n                      }\n                    }\n                    cursor.continue();\n                  } else {\n                    done(entriesToDelete);\n                  }\n                };\n              });\n            case 2:\n              entriesToDelete = _context3.sent;\n              // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n              // we should be able to remove this loop and do the entry deletion in the\n              // cursor loop above:\n              // https://github.com/GoogleChrome/workbox/issues/1978\n              urlsDeleted = [];\n              _iterator = _createForOfIteratorHelper(entriesToDelete);\n              _context3.prev = 5;\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 14;\n                break;\n              }\n              entry = _step.value;\n              _context3.next = 11;\n              return this._db.delete(OBJECT_STORE_NAME, entry.id);\n            case 11:\n              urlsDeleted.push(entry.url);\n            case 12:\n              _context3.next = 7;\n              break;\n            case 14:\n              _context3.next = 19;\n              break;\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](5);\n              _iterator.e(_context3.t0);\n            case 19:\n              _context3.prev = 19;\n              _iterator.f();\n              return _context3.finish(19);\n            case 22:\n              return _context3.abrupt(\"return\", urlsDeleted);\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[5, 16, 19, 22]]);\n      }));\n      function expireEntries(_x4, _x5) {\n        return _expireEntries.apply(this, arguments);\n      }\n      return expireEntries;\n    }()\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n  }, {\n    key: \"_getId\",\n    value: function _getId(url) {\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      return this._cacheName + '|' + normalizeURL(url);\n    }\n  }]);\n  return CacheTimestampsModel;\n}();\nexport { CacheTimestampsModel };","map":{"version":3,"names":["DBWrapper","deleteDatabase","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","cacheName","_cacheName","_db","onupgradeneeded","event","_handleUpgrade","db","target","result","objStore","createObjectStore","keyPath","createIndex","unique","timestamp","entry","id","_getId","put","get","minTimestamp","maxCount","transaction","txn","done","store","objectStore","request","index","openCursor","entriesToDelete","entriesNotDeletedCount","onsuccess","cursor","value","push","continue","urlsDeleted","delete"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,cAAc,QAAQ,yCAAyC;AACxE,OAAO,gBAAgB;AACvB,IAAMC,OAAO,GAAG,oBAAoB;AACpC,IAAMC,iBAAiB,GAAG,eAAe;AACzC,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,eAAe,EAAK;EACtC,IAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,eAAe,EAAEG,QAAQ,CAACC,IAAI,CAAC;EACnDH,GAAG,CAACI,IAAI,GAAG,EAAE;EACb,OAAOJ,GAAG,CAACG,IAAI;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA;AAJA,IAKME,oBAAoB;EACtB;AACJ;AACA;AACA;AACA;AACA;EACI,8BAAYC,SAAS,EAAE;IAAA;IAAA;IACnB,IAAI,CAACC,UAAU,GAAGD,SAAS;IAC3B,IAAI,CAACE,GAAG,GAAG,IAAId,SAAS,CAACE,OAAO,EAAE,CAAC,EAAE;MACjCa,eAAe,EAAE,yBAACC,KAAK;QAAA,OAAK,KAAI,CAACC,cAAc,CAACD,KAAK,CAAC;MAAA;IAC1D,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,wBAAeA,KAAK,EAAE;MAClB,IAAME,EAAE,GAAGF,KAAK,CAACG,MAAM,CAACC,MAAM;MAC9B;MACA;MACA;MACA;MACA,IAAMC,QAAQ,GAAGH,EAAE,CAACI,iBAAiB,CAACnB,iBAAiB,EAAE;QAAEoB,OAAO,EAAE;MAAK,CAAC,CAAC;MAC3E;MACA;MACA;MACAF,QAAQ,CAACG,WAAW,CAAC,WAAW,EAAE,WAAW,EAAE;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC;MACjEJ,QAAQ,CAACG,WAAW,CAAC,WAAW,EAAE,WAAW,EAAE;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC;MACjE;MACA;MACAxB,cAAc,CAAC,IAAI,CAACY,UAAU,CAAC;IACnC;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA;MAAA,+EAMA,iBAAmBP,GAAG,EAAEoB,SAAS;QAAA;QAAA;UAAA;YAAA;cAC7BpB,GAAG,GAAGF,YAAY,CAACE,GAAG,CAAC;cACjBqB,KAAK,GAAG;gBACVrB,GAAG,EAAHA,GAAG;gBACHoB,SAAS,EAATA,SAAS;gBACTd,SAAS,EAAE,IAAI,CAACC,UAAU;gBAC1B;gBACA;gBACA;gBACAe,EAAE,EAAE,IAAI,CAACC,MAAM,CAACvB,GAAG;cACvB,CAAC;cAAA;cAAA,OACK,IAAI,CAACQ,GAAG,CAACgB,GAAG,CAAC3B,iBAAiB,EAAEwB,KAAK,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAC/C;MAAA;QAAA;MAAA;MAAA;IAAA;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA;IAAA;MAAA,+EAQA,kBAAmBrB,GAAG;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACE,IAAI,CAACQ,GAAG,CAACiB,GAAG,CAAC5B,iBAAiB,EAAE,IAAI,CAAC0B,MAAM,CAACvB,GAAG,CAAC,CAAC;YAAA;cAA/DqB,KAAK;cAAA,kCACJA,KAAK,CAACD,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACzB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAA;IAAA;MAAA,gFAWA,kBAAoBM,YAAY,EAAEC,QAAQ;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACR,IAAI,CAACnB,GAAG,CAACoB,WAAW,CAAC/B,iBAAiB,EAAE,WAAW,EAAE,UAACgC,GAAG,EAAEC,IAAI,EAAK;gBAC9F,IAAMC,KAAK,GAAGF,GAAG,CAACG,WAAW,CAACnC,iBAAiB,CAAC;gBAChD,IAAMoC,OAAO,GAAGF,KAAK,CAACG,KAAK,CAAC,WAAW,CAAC,CAACC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC;gBACjE,IAAMC,eAAe,GAAG,EAAE;gBAC1B,IAAIC,sBAAsB,GAAG,CAAC;gBAC9BJ,OAAO,CAACK,SAAS,GAAG,YAAM;kBACtB,IAAMC,MAAM,GAAGN,OAAO,CAACnB,MAAM;kBAC7B,IAAIyB,MAAM,EAAE;oBACR,IAAMzB,MAAM,GAAGyB,MAAM,CAACC,KAAK;oBAC3B;oBACA;oBACA,IAAI1B,MAAM,CAACR,SAAS,KAAK,MAAI,CAACC,UAAU,EAAE;sBACtC;sBACA;sBACA,IAAKmB,YAAY,IAAIZ,MAAM,CAACM,SAAS,GAAGM,YAAY,IAC/CC,QAAQ,IAAIU,sBAAsB,IAAIV,QAAS,EAAE;wBAClD;wBACA;wBACA;wBACA;wBACA;wBACA;wBACA;wBACA;wBACAS,eAAe,CAACK,IAAI,CAACF,MAAM,CAACC,KAAK,CAAC;sBACtC,CAAC,MACI;wBACDH,sBAAsB,EAAE;sBAC5B;oBACJ;oBACAE,MAAM,CAACG,QAAQ,EAAE;kBACrB,CAAC,MACI;oBACDZ,IAAI,CAACM,eAAe,CAAC;kBACzB;gBACJ,CAAC;cACL,CAAC,CAAC;YAAA;cApCIA,eAAe;cAqCrB;cACA;cACA;cACA;cACMO,WAAW,GAAG,EAAE;cAAA,uCACFP,eAAe;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAxBf,KAAK;cAAA;cAAA,OACN,IAAI,CAACb,GAAG,CAACoC,MAAM,CAAC/C,iBAAiB,EAAEwB,KAAK,CAACC,EAAE,CAAC;YAAA;cAClDqB,WAAW,CAACF,IAAI,CAACpB,KAAK,CAACrB,GAAG,CAAC;YAAC;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA,kCAEzB2C,WAAW;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACrB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA;IAAA,OAQA,gBAAO3C,GAAG,EAAE;MACR;MACA;MACA;MACA,OAAO,IAAI,CAACO,UAAU,GAAG,GAAG,GAAGT,YAAY,CAACE,GAAG,CAAC;IACpD;EAAC;EAAA;AAAA;AAEL,SAASK,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}