{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _assertThisInitialized from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { m as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as _transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\nvar ViewController = /*#__PURE__*/function () {\n  function ViewController(component, params) {\n    _classCallCheck(this, ViewController);\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  _createClass(ViewController, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(container) {\n        var component;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.state = VIEW_STATE_ATTACHED;\n              if (this.element) {\n                _context.next = 6;\n                break;\n              }\n              component = this.component;\n              _context.next = 5;\n              return attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n            case 5:\n              this.element = _context.sent;\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\n     * DOM WRITE\n     */\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n      var element = this.element;\n      if (element) {\n        if (this.delegate) {\n          this.delegate.removeViewFromDom(element.parentElement, element);\n        } else {\n          element.remove();\n        }\n      }\n      this.nav = undefined;\n      this.state = VIEW_STATE_DESTROYED;\n    }\n  }]);\n  return ViewController;\n}();\nvar matches = function matches(view, id, params) {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nvar convertToView = function convertToView(page, params) {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nvar convertToViews = function convertToViews(pages) {\n  return pages.map(function (page) {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(function (v) {\n    return v !== null;\n  });\n};\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nvar Nav = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n  var _super = _createSuper(_class);\n  function _class() {\n    var _this;\n    _classCallCheck(this, _class);\n    _this = _super.call(this);\n    _this.__registerHost();\n    _this.__attachShadow();\n    _this.ionNavWillLoad = createEvent(_assertThisInitialized(_this), \"ionNavWillLoad\", 7);\n    _this.ionNavWillChange = createEvent(_assertThisInitialized(_this), \"ionNavWillChange\", 3);\n    _this.ionNavDidChange = createEvent(_assertThisInitialized(_this), \"ionNavDidChange\", 3);\n    _this.transInstr = [];\n    _this.animationEnabled = true;\n    _this.useRouter = false;\n    _this.isTransitioning = false;\n    _this.destroyed = false;\n    _this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    _this.animated = true;\n    return _this;\n  }\n  _createClass(_class, [{\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(this.swipeGesture === true);\n      }\n    }\n  }, {\n    key: \"rootChanged\",\n    value: function rootChanged() {\n      var isDev = Build.isDev;\n      if (this.root !== undefined) {\n        if (!this.useRouter) {\n          this.setRoot(this.root, this.rootParams);\n        } else if (isDev) {\n          console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n        }\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n      if (this.swipeGesture === undefined) {\n        var mode = getIonMode(this);\n        this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n      }\n      this.ionNavWillLoad.emit();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.rootChanged();\n              _context2.next = 3;\n              return import('./swipe-back.js');\n            case 3:\n              this.gesture = _context2.sent.createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n              this.swipeGestureChanged();\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.destroyed = false;\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var _iterator = _createForOfIteratorHelper(this.views),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n          view._destroy();\n        }\n        // Release swipe back gesture and transition.\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n      this.transInstr.length = 0;\n      this.views.length = 0;\n      this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"push\",\n    value: function push(component, componentProps, opts, done) {\n      return this.insert(-1, component, componentProps, opts, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(insertIndex, component, componentProps, opts, done) {\n      return this.insertPages(insertIndex, [{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"insertPages\",\n    value: function insertPages(insertIndex, insertComponents, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: insertComponents,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"pop\",\n    value: function pop(opts, done) {\n      return this.removeIndex(-1, 1, opts, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"popTo\",\n    value: function popTo(indexOrViewCtrl, opts, done) {\n      var ti = {\n        removeStart: -1,\n        removeCount: -1,\n        opts: opts\n      };\n      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n        ti.removeView = indexOrViewCtrl;\n        ti.removeStart = 1;\n      } else if (typeof indexOrViewCtrl === 'number') {\n        ti.removeStart = indexOrViewCtrl + 1;\n      }\n      return this.queueTrns(ti, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(opts, done) {\n      return this.removeIndex(1, -1, opts, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"removeIndex\",\n    value: function removeIndex(startIndex) {\n      var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var opts = arguments.length > 2 ? arguments[2] : undefined;\n      var done = arguments.length > 3 ? arguments[3] : undefined;\n      return this.queueTrns({\n        removeStart: startIndex,\n        removeCount: removeCount,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"setRoot\",\n    value: function setRoot(component, componentProps, opts, done) {\n      return this.setPages([{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n  }, {\n    key: \"setPages\",\n    value: function setPages(views, opts, done) {\n      opts !== null && opts !== void 0 ? opts : opts = {};\n      // if animation wasn't set to true then default it to NOT animate\n      if (opts.animated !== true) {\n        opts.animated = false;\n      }\n      return this.queueTrns({\n        insertStart: 0,\n        insertViews: views,\n        removeStart: 0,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Called by the router to update the view.\n     *\n     * @param id The component tag.\n     * @param params The component params.\n     * @param direction A direction hint.\n     * @param animation an AnimationBuilder.\n     *\n     * @return the status.\n     * @internal\n     */\n  }, {\n    key: \"setRouteId\",\n    value: function setRouteId(id, params, direction, animation) {\n      var active = this.getActiveSync();\n      if (matches(active, id, params)) {\n        return Promise.resolve({\n          changed: false,\n          element: active.element\n        });\n      }\n      var resolve;\n      var promise = new Promise(function (r) {\n        return resolve = r;\n      });\n      var finish;\n      var commonOpts = {\n        updateURL: false,\n        viewIsReady: function viewIsReady(enteringEl) {\n          var mark;\n          var p = new Promise(function (r) {\n            return mark = r;\n          });\n          resolve({\n            changed: true,\n            element: enteringEl,\n            markVisible: function () {\n              var _markVisible = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      mark();\n                      _context3.next = 3;\n                      return finish;\n                    case 3:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }, _callee3);\n              }));\n              function markVisible() {\n                return _markVisible.apply(this, arguments);\n              }\n              return markVisible;\n            }()\n          });\n          return p;\n        }\n      };\n      if (direction === 'root') {\n        finish = this.setRoot(id, params, commonOpts);\n      } else {\n        // Look for a view matching the target in the view stack.\n        var viewController = this.views.find(function (v) {\n          return matches(v, id, params);\n        });\n        if (viewController) {\n          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animationBuilder: animation\n          }));\n        } else if (direction === 'forward') {\n          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n            animationBuilder: animation\n          }));\n        } else if (direction === 'back') {\n          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animated: true,\n            animationBuilder: animation\n          }));\n        }\n      }\n      return promise;\n    }\n    /**\n     * Called by <ion-router> to retrieve the current component.\n     *\n     * @internal\n     */\n  }, {\n    key: \"getRouteId\",\n    value: function () {\n      var _getRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var active;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              active = this.getActiveSync();\n              if (!active) {\n                _context4.next = 3;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n              });\n            case 3:\n              return _context4.abrupt(\"return\", undefined);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function getRouteId() {\n        return _getRouteId.apply(this, arguments);\n      }\n      return getRouteId;\n    }()\n    /**\n     * Get the active view.\n     */\n  }, {\n    key: \"getActive\",\n    value: function () {\n      var _getActive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.getActiveSync());\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getActive() {\n        return _getActive.apply(this, arguments);\n      }\n      return getActive;\n    }()\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n  }, {\n    key: \"getByIndex\",\n    value: function () {\n      var _getByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(index) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this.views[index]);\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getByIndex(_x2) {\n        return _getByIndex.apply(this, arguments);\n      }\n      return getByIndex;\n    }()\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n  }, {\n    key: \"canGoBack\",\n    value: function () {\n      var _canGoBack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(view) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", this.canGoBackSync(view));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function canGoBack(_x3) {\n        return _canGoBack.apply(this, arguments);\n      }\n      return canGoBack;\n    }()\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n  }, {\n    key: \"getPrevious\",\n    value: function () {\n      var _getPrevious = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(view) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this.getPreviousSync(view));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getPrevious(_x4) {\n        return _getPrevious.apply(this, arguments);\n      }\n      return getPrevious;\n    }()\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.views.length;\n    }\n  }, {\n    key: \"getActiveSync\",\n    value: function getActiveSync() {\n      return this.views[this.views.length - 1];\n    }\n  }, {\n    key: \"canGoBackSync\",\n    value: function canGoBackSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n      return !!(view && this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getPreviousSync\",\n    value: function getPreviousSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n      if (!view) {\n        return undefined;\n      }\n      var views = this.views;\n      var index = views.indexOf(view);\n      return index > 0 ? views[index - 1] : undefined;\n    }\n    /**\n     * Adds a navigation stack change to the queue and schedules it to run.\n     *\n     * @returns Whether the transition succeeds.\n     */\n  }, {\n    key: \"queueTrns\",\n    value: function () {\n      var _queueTrns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(ti, done) {\n        var _a, _b, promise, router, canTransition;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy))) {\n                _context9.next = 2;\n                break;\n              }\n              return _context9.abrupt(\"return\", false);\n            case 2:\n              promise = new Promise(function (resolve, reject) {\n                ti.resolve = resolve;\n                ti.reject = reject;\n              });\n              ti.done = done;\n              /**\n               * If using router, check to see if navigation hooks\n               * will allow us to perform this transition. This\n               * is required in order for hooks to work with\n               * the ion-back-button or swipe to go back.\n               */\n              if (!(ti.opts && ti.opts.updateURL !== false && this.useRouter)) {\n                _context9.next = 15;\n                break;\n              }\n              router = document.querySelector('ion-router');\n              if (!router) {\n                _context9.next = 15;\n                break;\n              }\n              _context9.next = 9;\n              return router.canTransition();\n            case 9:\n              canTransition = _context9.sent;\n              if (!(canTransition === false)) {\n                _context9.next = 12;\n                break;\n              }\n              return _context9.abrupt(\"return\", false);\n            case 12:\n              if (!(typeof canTransition === 'string')) {\n                _context9.next = 15;\n                break;\n              }\n              router.push(canTransition, ti.opts.direction || 'back');\n              return _context9.abrupt(\"return\", false);\n            case 15:\n              // Normalize empty\n              if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n                ti.insertViews = undefined;\n              }\n              // Enqueue transition instruction\n              this.transInstr.push(ti);\n              // if there isn't a transition already happening\n              // then this will kick off this transition\n              this.nextTrns();\n              return _context9.abrupt(\"return\", promise);\n            case 19:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function queueTrns(_x5, _x6) {\n        return _queueTrns.apply(this, arguments);\n      }\n      return queueTrns;\n    }()\n  }, {\n    key: \"success\",\n    value: function success(result, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n      if (ti.done) {\n        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n      }\n      ti.resolve(result.hasCompleted);\n      if (ti.opts.updateURL !== false && this.useRouter) {\n        var router = document.querySelector('ion-router');\n        if (router) {\n          var direction = result.direction === 'back' ? 'back' : 'forward';\n          router.navChanged(direction);\n        }\n      }\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(rejectReason, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n      this.transInstr.length = 0;\n      this.fireError(rejectReason, ti);\n    }\n  }, {\n    key: \"fireError\",\n    value: function fireError(rejectReason, ti) {\n      if (ti.done) {\n        ti.done(false, false, rejectReason);\n      }\n      if (ti.reject && !this.destroyed) {\n        ti.reject(rejectReason);\n      } else {\n        ti.resolve(false);\n      }\n    }\n    /**\n     * Consumes the next transition in the queue.\n     *\n     * @returns whether the transition is executed.\n     */\n  }, {\n    key: \"nextTrns\",\n    value: function nextTrns() {\n      // this is the framework's bread 'n butta function\n      // only one transition is allowed at any given time\n      if (this.isTransitioning) {\n        return false;\n      }\n      // there is no transition happening right now, executes the next instructions.\n      var ti = this.transInstr.shift();\n      if (!ti) {\n        return false;\n      }\n      this.runTransition(ti);\n      return true;\n    }\n    /** Executes all the transition instruction from the queue. */\n  }, {\n    key: \"runTransition\",\n    value: function () {\n      var _runTransition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(ti) {\n        var leavingView, enteringView, requiresTransition, isBackDirection, result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              // set that this nav is actively transitioning\n              this.ionNavWillChange.emit();\n              this.isTransitioning = true;\n              this.prepareTI(ti);\n              leavingView = this.getActiveSync();\n              enteringView = this.getEnteringView(ti, leavingView);\n              if (!(!leavingView && !enteringView)) {\n                _context10.next = 8;\n                break;\n              }\n              throw new Error('no views in the stack to be removed');\n            case 8:\n              if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {\n                _context10.next = 11;\n                break;\n              }\n              _context10.next = 11;\n              return enteringView.init(this.el);\n            case 11:\n              this.postViewInit(enteringView, leavingView, ti);\n              // Needs transition?\n              requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n              if (requiresTransition && ti.opts && leavingView) {\n                isBackDirection = ti.opts.direction === 'back';\n                /**\n                 * If heading back, use the entering page's animation\n                 * unless otherwise specified by the developer.\n                 */\n                if (isBackDirection) {\n                  ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n                }\n                leavingView.animationBuilder = ti.opts.animationBuilder;\n              }\n              if (!requiresTransition) {\n                _context10.next = 20;\n                break;\n              }\n              _context10.next = 17;\n              return this.transition(enteringView, leavingView, ti);\n            case 17:\n              result = _context10.sent;\n              _context10.next = 21;\n              break;\n            case 20:\n              // transition is not required, so we are already done!\n              // they're inserting/removing the views somewhere in the middle or\n              // beginning, so visually nothing needs to animate/transition\n              // resolve immediately because there's no animation that's happening\n              result = {\n                hasCompleted: true,\n                requiresTransition: false\n              };\n            case 21:\n              this.success(result, ti);\n              this.ionNavDidChange.emit();\n              _context10.next = 28;\n              break;\n            case 25:\n              _context10.prev = 25;\n              _context10.t0 = _context10[\"catch\"](0);\n              this.failed(_context10.t0, ti);\n            case 28:\n              this.isTransitioning = false;\n              this.nextTrns();\n            case 30:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[0, 25]]);\n      }));\n      function runTransition(_x7) {\n        return _runTransition.apply(this, arguments);\n      }\n      return runTransition;\n    }()\n  }, {\n    key: \"prepareTI\",\n    value: function prepareTI(ti) {\n      var _a, _b;\n      var _c;\n      var viewsLength = this.views.length;\n      (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n      (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n      if (ti.removeView !== undefined) {\n        assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n        assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n        var index = this.views.indexOf(ti.removeView);\n        if (index < 0) {\n          throw new Error('removeView was not found');\n        }\n        ti.removeStart += index;\n      }\n      if (ti.removeStart !== undefined) {\n        if (ti.removeStart < 0) {\n          ti.removeStart = viewsLength - 1;\n        }\n        if (ti.removeCount < 0) {\n          ti.removeCount = viewsLength - ti.removeStart;\n        }\n        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n      }\n      if (ti.insertViews) {\n        // allow -1 to be passed in to auto push it on the end\n        // and clean up the index if it's larger then the size of the stack\n        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n          ti.insertStart = viewsLength;\n        }\n        ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n      }\n      var insertViews = ti.insertViews;\n      if (!insertViews) {\n        return;\n      }\n      assert(insertViews.length > 0, 'length can not be zero');\n      var viewControllers = convertToViews(insertViews);\n      if (viewControllers.length === 0) {\n        throw new Error('invalid views to insert');\n      }\n      // Check all the inserted view are correct\n      var _iterator2 = _createForOfIteratorHelper(viewControllers),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.delegate = ti.opts.delegate;\n          var nav = view.nav;\n          if (nav && nav !== this) {\n            throw new Error('inserted view was already inserted');\n          }\n          if (view.state === VIEW_STATE_DESTROYED) {\n            throw new Error('inserted view was already destroyed');\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      ti.insertViews = viewControllers;\n    }\n    /**\n     * Returns the view that will be entered considering the transition instructions.\n     *\n     * @param ti The instructions.\n     * @param leavingView The view being left or undefined if none.\n     *\n     * @returns The view that will be entered, undefined if none.\n     */\n  }, {\n    key: \"getEnteringView\",\n    value: function getEnteringView(ti, leavingView) {\n      // The last inserted view will be entered when view are inserted.\n      var insertViews = ti.insertViews;\n      if (insertViews !== undefined) {\n        return insertViews[insertViews.length - 1];\n      }\n      // When views are deleted, we will enter the last view that is not removed and not the view being left.\n      var removeStart = ti.removeStart;\n      if (removeStart !== undefined) {\n        var views = this.views;\n        var removeEnd = removeStart + ti.removeCount;\n        for (var i = views.length - 1; i >= 0; i--) {\n          var view = views[i];\n          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n            return view;\n          }\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Adds and Removes the views from the navigation stack.\n     *\n     * @param enteringView The view being entered.\n     * @param leavingView The view being left.\n     * @param ti The instructions.\n     */\n  }, {\n    key: \"postViewInit\",\n    value: function postViewInit(enteringView, leavingView, ti) {\n      var _a, _b, _c;\n      assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n      assert(ti.resolve, 'resolve must be valid');\n      assert(ti.reject, 'reject must be valid');\n      // Compute the views to remove.\n      var opts = ti.opts;\n      var insertViews = ti.insertViews,\n        removeStart = ti.removeStart,\n        removeCount = ti.removeCount;\n      /** Records the view to destroy */\n      var destroyQueue;\n      // there are views to remove\n      if (removeStart !== undefined && removeCount !== undefined) {\n        assert(removeStart >= 0, 'removeStart can not be negative');\n        assert(removeCount >= 0, 'removeCount can not be negative');\n        destroyQueue = [];\n        for (var i = removeStart; i < removeStart + removeCount; i++) {\n          var view = this.views[i];\n          if (view !== undefined && view !== enteringView && view !== leavingView) {\n            destroyQueue.push(view);\n          }\n        }\n        // default the direction to \"back\"\n        (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n      }\n      var finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n      assert(finalNumViews >= 0, 'final balance can not be negative');\n      if (finalNumViews === 0) {\n        console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n        throw new Error('navigation stack needs at least one root page');\n      }\n      // At this point the transition can not be rejected, any throw should be an error\n      // Insert the new views in the stack.\n      if (insertViews) {\n        // add the views to the\n        var insertIndex = ti.insertStart;\n        var _iterator3 = _createForOfIteratorHelper(insertViews),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _view = _step3.value;\n            this.insertViewAt(_view, insertIndex);\n            insertIndex++;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        if (ti.enteringRequiresTransition) {\n          // default to forward if not already set\n          (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n        }\n      }\n      // if the views to be removed are in the beginning or middle\n      // and there is not a view that needs to visually transition out\n      // then just destroy them and don't transition anything\n      // batch all of lifecycles together\n      // let's make sure, callbacks are zoned\n      if (destroyQueue && destroyQueue.length > 0) {\n        var _iterator4 = _createForOfIteratorHelper(destroyQueue),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _view2 = _step4.value;\n            lifecycle(_view2.element, LIFECYCLE_WILL_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_DID_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_WILL_UNLOAD);\n          }\n          // once all lifecycle events has been delivered, we can safely detroy the views\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        var _iterator5 = _createForOfIteratorHelper(destroyQueue),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _view3 = _step5.value;\n            this.destroyView(_view3);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"transition\",\n    value: function () {\n      var _transition2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(enteringView, leavingView, ti) {\n        var _this2 = this;\n        var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield$_transition, hasCompleted;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              // we should animate (duration > 0) if the pushed page is not the first one (startup)\n              // or if it is a portal (modal, actionsheet, etc.)\n              opts = ti.opts;\n              progressCallback = opts.progressAnimation ? function (ani) {\n                return _this2.sbAni = ani;\n              } : undefined;\n              mode = getIonMode(this);\n              enteringEl = enteringView.element;\n              leavingEl = leavingView && leavingView.element;\n              animationOpts = Object.assign(Object.assign({\n                mode: mode,\n                showGoBack: this.canGoBackSync(enteringView),\n                baseEl: this.el,\n                progressCallback: progressCallback,\n                animated: this.animated && config.getBoolean('animated', true),\n                enteringEl: enteringEl,\n                leavingEl: leavingEl\n              }, opts), {\n                animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n              });\n              _context11.next = 8;\n              return _transition(animationOpts);\n            case 8:\n              _yield$_transition = _context11.sent;\n              hasCompleted = _yield$_transition.hasCompleted;\n              return _context11.abrupt(\"return\", this.transitionFinish(hasCompleted, enteringView, leavingView, opts));\n            case 11:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function transition(_x8, _x9, _x10) {\n        return _transition2.apply(this, arguments);\n      }\n      return transition;\n    }()\n  }, {\n    key: \"transitionFinish\",\n    value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n      /**\n       * If the transition did not complete, the leavingView will still be the active\n       * view on the stack. Otherwise unmount all the views after the enteringView.\n       */\n      var activeView = hasCompleted ? enteringView : leavingView;\n      if (activeView) {\n        this.unmountInactiveViews(activeView);\n      }\n      return {\n        hasCompleted: hasCompleted,\n        requiresTransition: true,\n        enteringView: enteringView,\n        leavingView: leavingView,\n        direction: opts.direction\n      };\n    }\n    /**\n     * Inserts a view at the specified index.\n     *\n     * When the view already is in the stack it will be moved to the new position.\n     *\n     * @param view The view to insert.\n     * @param index The index where to insert the view.\n     */\n  }, {\n    key: \"insertViewAt\",\n    value: function insertViewAt(view, index) {\n      var views = this.views;\n      var existingIndex = views.indexOf(view);\n      if (existingIndex > -1) {\n        assert(view.nav === this, 'view is not part of the nav');\n        // The view already in the stack, removes it.\n        views.splice(existingIndex, 1);\n        // and add it back at the requested index.\n        views.splice(index, 0, view);\n      } else {\n        assert(!view.nav, 'nav is used');\n        // this is a new view to add to the stack\n        // create the new entering view\n        view.nav = this;\n        views.splice(index, 0, view);\n      }\n    }\n    /**\n     * Removes a view from the stack.\n     *\n     * @param view The view to remove.\n     */\n  }, {\n    key: \"removeView\",\n    value: function removeView(view) {\n      assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n      var views = this.views;\n      var index = views.indexOf(view);\n      assert(index > -1, 'view must be part of the stack');\n      if (index >= 0) {\n        views.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroyView\",\n    value: function destroyView(view) {\n      view._destroy();\n      this.removeView(view);\n    }\n    /**\n     * Unmounts all inactive views after the specified active view.\n     *\n     * DOM WRITE\n     *\n     * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n     */\n  }, {\n    key: \"unmountInactiveViews\",\n    value: function unmountInactiveViews(activeView) {\n      // ok, cleanup time!! Destroy all of the views that are\n      // INACTIVE and come after the active view\n      // only do this if the views exist, though\n      if (this.destroyed) {\n        return;\n      }\n      var views = this.views;\n      var activeViewIndex = views.indexOf(activeView);\n      for (var i = views.length - 1; i >= 0; i--) {\n        var view = views[i];\n        /**\n         * When inserting multiple views via insertPages\n         * the last page will be transitioned to, but the\n         * others will not be. As a result, a DOM element\n         * will only be created for the last page inserted.\n         * As a result, it is possible to have views in the\n         * stack that do not have `view.element` yet.\n         */\n        var element = view.element;\n        if (element) {\n          if (i > activeViewIndex) {\n            // this view comes after the active view\n            // let's unload it\n            lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n            this.destroyView(view);\n          } else if (i < activeViewIndex) {\n            // this view comes before the active view\n            // and it is not a portal then ensure it is hidden\n            setPageHidden(element, true);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.pop({\n        direction: 'back',\n        progressAnimation: true\n      });\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(stepValue) {\n      if (this.sbAni) {\n        this.sbAni.progressStep(stepValue);\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(shouldComplete, stepValue, dur) {\n      var _this3 = this;\n      if (this.sbAni) {\n        this.animationEnabled = false;\n        this.sbAni.onFinish(function () {\n          _this3.animationEnabled = true;\n        }, {\n          oneTimeCallback: true\n        });\n        // Account for rounding errors in JS\n        var newStepValue = shouldComplete ? -0.001 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n        if (!shouldComplete) {\n          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n        } else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n        }\n        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(\"slot\", null);\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return navCss;\n    }\n  }]);\n  return _class;\n}(HTMLElement), [1, \"ion-nav\", {\n  \"delegate\": [16],\n  \"swipeGesture\": [1028, \"swipe-gesture\"],\n  \"animated\": [4],\n  \"animation\": [16],\n  \"rootParams\": [16],\n  \"root\": [1],\n  \"push\": [64],\n  \"insert\": [64],\n  \"insertPages\": [64],\n  \"pop\": [64],\n  \"popTo\": [64],\n  \"popToRoot\": [64],\n  \"removeIndex\": [64],\n  \"setRoot\": [64],\n  \"setPages\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64],\n  \"getActive\": [64],\n  \"getByIndex\": [64],\n  \"canGoBack\": [64],\n  \"getPrevious\": [64]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-nav\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-nav\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Nav);\n        }\n        break;\n    }\n  });\n}\nvar IonNav = Nav;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonNav, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","h","Build","b","getIonMode","c","config","g","getTimeGivenProgression","m","assert","s","shallowEqualStringMap","l","lifecycle","t","transition","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","container","element","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","__registerHost","__attachShadow","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","isDev","root","setRoot","rootParams","console","warn","document","querySelector","el","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","length","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","removeIndex","indexOrViewCtrl","ti","removeStart","removeCount","removeView","startIndex","setPages","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","Object","assign","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","_a","skipIfBusy","reject","router","canTransition","_b","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","success","failed","_c","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalNumViews","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","pop","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","defineCustomElement$1","customElements","components","forEach","define","IonNav","defineCustomElement"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@ionic/core/components/ion-nav.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { m as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages\n    .map((page) => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  })\n    .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n      else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts,\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts,\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts,\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : (opts = {});\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts,\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element,\n      });\n    }\n    let resolve;\n    const promise = new Promise((r) => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: (enteringEl) => {\n        let mark;\n        const p = new Promise((r) => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          },\n        });\n        return p;\n      },\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find((v) => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element,\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      }\n      else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false,\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const { insertViews, removeStart, removeCount } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? (ani) => (this.sbAni = ani) : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\n     * If the transition did not complete, the leavingView will still be the active\n     * view on the stack. Otherwise unmount all the views after the enteringView.\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction,\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * Unmounts all inactive views after the specified active view.\n   *\n   * DOM WRITE\n   *\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.pop({ direction: 'back', progressAnimation: true });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n  static get style() { return navCss; }\n}, [1, \"ion-nav\", {\n    \"delegate\": [16],\n    \"swipeGesture\": [1028, \"swipe-gesture\"],\n    \"animated\": [4],\n    \"animation\": [16],\n    \"rootParams\": [16],\n    \"root\": [1],\n    \"push\": [64],\n    \"insert\": [64],\n    \"insertPages\": [64],\n    \"pop\": [64],\n    \"popTo\": [64],\n    \"popToRoot\": [64],\n    \"removeIndex\": [64],\n    \"setRoot\": [64],\n    \"setPages\": [64],\n    \"setRouteId\": [64],\n    \"getRouteId\": [64],\n    \"getActive\": [64],\n    \"getByIndex\": [64],\n    \"canGoBack\": [64],\n    \"getPrevious\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-nav\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Nav);\n      }\n      break;\n  } });\n}\n\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonNav, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}