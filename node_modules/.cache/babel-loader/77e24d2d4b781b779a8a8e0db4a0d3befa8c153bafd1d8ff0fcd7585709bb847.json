{"ast":null,"code":"import _toConsumableArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*\n Stencil Client Platform v2.21.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function safeSelector(selector) {\n  var placeholders = [];\n  var index = 0;\n  // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n  var content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  var ss = {\n    content: content,\n    placeholders: placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = function restoreSafeSelector(placeholders, content) {\n  return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n    return placeholders[+index];\n  });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function stripComments(input) {\n  return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var selector = arguments.length <= 2 ? undefined : arguments[2];\n    var content = '';\n    var suffix = arguments.length <= 4 ? undefined : arguments[4];\n    var contentPrefix = '';\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n    var cssRule = {\n      selector: selector,\n      content: content\n    };\n    var rule = ruleCallback(cssRule);\n    return \"\".concat(arguments.length <= 1 ? undefined : arguments[1]).concat(rule.selector).concat(arguments.length <= 3 ? undefined : arguments[3]).concat(contentPrefix).concat(rule.content).concat(suffix);\n  });\n};\nvar escapeBlocks = function escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  var strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function insertPolyfillHostInCssText(selector) {\n  selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n  return selector;\n};\nvar convertColonRule = function convertColonRule(cssText, regExp, partReplacer) {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, function () {\n    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {\n      m[_key] = arguments[_key];\n    }\n    if (m[2]) {\n      var parts = m[2].split(',');\n      var r = [];\n      for (var i = 0; i < parts.length; i++) {\n        var p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = function colonHostPartReplacer(host, part, suffix) {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function convertColonHost(cssText) {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function colonHostContextPartReplacer(host, part, suffix) {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\nvar convertColonSlotted = function convertColonSlotted(cssText, slotScopeId) {\n  var slotClass = '.' + slotScopeId + ' > ';\n  var selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, function () {\n    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      m[_key2] = arguments[_key2];\n    }\n    if (m[2]) {\n      var compound = m[2].trim();\n      var suffix = m[3];\n      var slottedSelector = slotClass + compound + suffix;\n      var prefixSelector = '';\n      for (var i = m[4] - 1; i >= 0; i--) {\n        var char = m[5][i];\n        if (char === '}' || char === ',') {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      var orgSelector = prefixSelector + slottedSelector;\n      var addedSelector = \"\".concat(prefixSelector.trimRight()).concat(slottedSelector.trim());\n      if (orgSelector.trim() !== addedSelector.trim()) {\n        var updatedSelector = \"\".concat(addedSelector, \", \").concat(orgSelector);\n        selectors.push({\n          orgSelector: orgSelector,\n          updatedSelector: updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors: selectors,\n    cssText: cssText\n  };\n};\nvar convertColonHostContext = function convertColonHostContext(cssText) {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function convertShadowDOMSelectors(cssText) {\n  return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n    return result.replace(pattern, ' ');\n  }, cssText);\n};\nvar makeScopeMatcher = function makeScopeMatcher(scopeSelector) {\n  var lre = /\\[/g;\n  var rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function selectorNeedsScoping(selector, scopeSelector) {\n  var re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\nvar injectScopingSelector = function injectScopingSelector(selector, scopingSelector) {\n  return selector.replace(_selectorPartsRe, function (_) {\n    var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var _colonGroup = arguments.length > 2 ? arguments[2] : undefined;\n    var colon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var after = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = function applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    var replaceBy = \".\".concat(hostSelector);\n    return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n      return injectScopingSelector(selector, replaceBy);\n    }).replace(_polyfillHostRe, replaceBy + ' ');\n  }\n  return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n  var isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, function (_) {\n    return arguments.length <= 1 ? undefined : arguments[1];\n  });\n  var className = '.' + scopeSelector;\n  var _scopeSelectorPart = function _scopeSelectorPart(p) {\n    var scopedP = p.trim();\n    if (!scopedP) {\n      return '';\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      var t = p.replace(_polyfillHostRe, '');\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  var safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  var scopedSelector = '';\n  var startIndex = 0;\n  var res;\n  var sep = /( |>|\\+|~(?!=))\\s*/g;\n  // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n  var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n  var shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    var separator = res[1];\n    var _part = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || _part.indexOf(_polyfillHostNoCombinator) > -1;\n    var scopedPart = shouldScope ? _scopeSelectorPart(_part) : _part;\n    scopedSelector += \"\".concat(scopedPart, \" \").concat(separator, \" \");\n    startIndex = sep.lastIndex;\n  }\n  var part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  // replace the placeholders with their original values\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function scopeSelector(selector, scopeSelectorText, hostSelector, slotSelector) {\n  return selector.split(',').map(function (shallowPart) {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\nvar scopeSelectors = function scopeSelectors(cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n  return processRules(cssText, function (rule) {\n    var selector = rule.selector;\n    var content = rule.content;\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    var cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content: content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = function scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  var slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\".concat(hostScopeId));\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return {\n    cssText: cssText.trim(),\n    slottedSelectors: slotted.selectors\n  };\n};\nvar scopeCss = function scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var hostScopeId = scopeId + '-h';\n  var slotScopeId = scopeId + '-s';\n  var commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  var orgSelectors = [];\n  if (commentOriginalSelector) {\n    var processCommentedSelector = function processCommentedSelector(rule) {\n      var placeholder = \"/*!@___\".concat(orgSelectors.length, \"___*/\");\n      var comment = \"/*!@\".concat(rule.selector, \"*/\");\n      orgSelectors.push({\n        placeholder: placeholder,\n        comment: comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, function (rule) {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText].concat(_toConsumableArray(commentsWithHash)).join('\\n');\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(function (_ref) {\n      var placeholder = _ref.placeholder,\n        comment = _ref.comment;\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach(function (slottedSelector) {\n    cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport { scopeCss };","map":{"version":3,"names":["safeSelector","selector","placeholders","index","replace","_","keep","replaceBy","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.21.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}