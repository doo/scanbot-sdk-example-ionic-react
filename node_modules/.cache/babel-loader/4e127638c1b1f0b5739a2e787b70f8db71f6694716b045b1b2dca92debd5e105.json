{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nvar NetworkOnly = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   */\n  function NetworkOnly() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, NetworkOnly);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  _createClass(NetworkOnly, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var event, request, error, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              event = _ref.event, request = _ref.request;\n              if (typeof request === 'string') {\n                request = new Request(request);\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                assert.isInstance(request, Request, {\n                  moduleName: 'workbox-strategies',\n                  className: 'NetworkOnly',\n                  funcName: 'handle',\n                  paramName: 'request'\n                });\n              }\n              _context.prev = 3;\n              _context.next = 6;\n              return fetchWrapper.fetch({\n                request: request,\n                event: event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins\n              });\n            case 6:\n              response = _context.sent;\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](3);\n              error = _context.t0;\n            case 12:\n              if (process.env.NODE_ENV !== 'production') {\n                logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\n                if (response) {\n                  logger.log(\"Got response from network.\");\n                } else {\n                  logger.log(\"Unable to get a response from the network.\");\n                }\n                messages.printFinalResponse(response);\n                logger.groupEnd();\n              }\n              if (response) {\n                _context.next = 15;\n                break;\n              }\n              throw new WorkboxError('no-response', {\n                url: request.url,\n                error: error\n              });\n            case 15:\n              return _context.abrupt(\"return\", response);\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 9]]);\n      }));\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n  }]);\n  return NetworkOnly;\n}();\nexport { NetworkOnly };","map":{"version":3,"names":["assert","fetchWrapper","logger","WorkboxError","messages","NetworkOnly","options","_plugins","plugins","_fetchOptions","fetchOptions","event","request","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","fetch","response","error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-strategies/NetworkOnly.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkOnly {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     */\n    constructor(options = {}) {\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request The request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkOnly',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,IAYMC,WAAW;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,uBAA0B;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAAA;IACpB,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAACE,OAAO,IAAI,EAAE;IACrC,IAAI,CAACC,aAAa,GAAGH,OAAO,CAACI,YAAY;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATI;IAAA;IAAA;MAAA,yEAUA;QAAA;QAAA;UAAA;YAAA;cAAeC,KAAK,QAALA,KAAK,EAAEC,OAAO,QAAPA,OAAO;cACzB,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;gBAC7BA,OAAO,GAAG,IAAIC,OAAO,CAACD,OAAO,CAAC;cAClC;cACA,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvChB,MAAM,CAACiB,UAAU,CAACL,OAAO,EAAEC,OAAO,EAAE;kBAChCK,UAAU,EAAE,oBAAoB;kBAChCC,SAAS,EAAE,aAAa;kBACxBC,QAAQ,EAAE,QAAQ;kBAClBC,SAAS,EAAE;gBACf,CAAC,CAAC;cACN;cAAC;cAAA;cAAA,OAIoBpB,YAAY,CAACqB,KAAK,CAAC;gBAChCV,OAAO,EAAPA,OAAO;gBACPD,KAAK,EAALA,KAAK;gBACLD,YAAY,EAAE,IAAI,CAACD,aAAa;gBAChCD,OAAO,EAAE,IAAI,CAACD;cAClB,CAAC,CAAC;YAAA;cALFgB,QAAQ;cAAA;cAAA;YAAA;cAAA;cAAA;cAQRC,KAAK,cAAM;YAAC;cAEhB,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvCd,MAAM,CAACuB,cAAc,CAACrB,QAAQ,CAACsB,aAAa,CAAC,aAAa,EAAEd,OAAO,CAAC,CAAC;gBACrE,IAAIW,QAAQ,EAAE;kBACVrB,MAAM,CAACyB,GAAG,8BAA8B;gBAC5C,CAAC,MACI;kBACDzB,MAAM,CAACyB,GAAG,8CAA8C;gBAC5D;gBACAvB,QAAQ,CAACwB,kBAAkB,CAACL,QAAQ,CAAC;gBACrCrB,MAAM,CAAC2B,QAAQ,EAAE;cACrB;cAAC,IACIN,QAAQ;gBAAA;gBAAA;cAAA;cAAA,MACH,IAAIpB,YAAY,CAAC,aAAa,EAAE;gBAAE2B,GAAG,EAAElB,OAAO,CAACkB,GAAG;gBAAEN,KAAK,EAALA;cAAM,CAAC,CAAC;YAAA;cAAA,iCAE/DD,QAAQ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAEL,SAASlB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}