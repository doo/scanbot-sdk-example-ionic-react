{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nvar StaleWhileRevalidate = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  function StaleWhileRevalidate() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, StaleWhileRevalidate);\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    if (options.plugins) {\n      var isUsingCacheWillUpdate = options.plugins.some(function (plugin) {\n        return !!plugin.cacheWillUpdate;\n      });\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin].concat(_toConsumableArray(options.plugins));\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  _createClass(StaleWhileRevalidate, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var event, request, logs, fetchAndCachePromise, response, error, _iterator, _step, log;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              event = _ref.event, request = _ref.request;\n              logs = [];\n              if (typeof request === 'string') {\n                request = new Request(request);\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                assert.isInstance(request, Request, {\n                  moduleName: 'workbox-strategies',\n                  className: 'StaleWhileRevalidate',\n                  funcName: 'handle',\n                  paramName: 'request'\n                });\n              }\n              fetchAndCachePromise = this._getFromNetwork({\n                request: request,\n                event: event\n              });\n              _context.next = 7;\n              return cacheWrapper.match({\n                cacheName: this._cacheName,\n                request: request,\n                event: event,\n                matchOptions: this._matchOptions,\n                plugins: this._plugins\n              });\n            case 7:\n              response = _context.sent;\n              if (!response) {\n                _context.next = 13;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"Found a cached response in the '\".concat(this._cacheName, \"'\") + \" cache. Will update with the network response in the background.\");\n              }\n              if (event) {\n                try {\n                  event.waitUntil(fetchAndCachePromise);\n                } catch (error) {\n                  if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache for '\".concat(getFriendlyURL(request.url), \"'.\"));\n                  }\n                }\n              }\n              _context.next = 23;\n              break;\n            case 13:\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"No response found in the '\".concat(this._cacheName, \"' cache. \") + \"Will wait for the network response.\");\n              }\n              _context.prev = 14;\n              _context.next = 17;\n              return fetchAndCachePromise;\n            case 17:\n              response = _context.sent;\n              _context.next = 23;\n              break;\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](14);\n              error = _context.t0;\n            case 23:\n              if (process.env.NODE_ENV !== 'production') {\n                logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n                _iterator = _createForOfIteratorHelper(logs);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    log = _step.value;\n                    logger.log(log);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                messages.printFinalResponse(response);\n                logger.groupEnd();\n              }\n              if (response) {\n                _context.next = 26;\n                break;\n              }\n              throw new WorkboxError('no-response', {\n                url: request.url,\n                error: error\n              });\n            case 26:\n              return _context.abrupt(\"return\", response);\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[14, 20]]);\n      }));\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n  }, {\n    key: \"_getFromNetwork\",\n    value: function () {\n      var _getFromNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n        var request, event, response, cachePutPromise;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              request = _ref2.request, event = _ref2.event;\n              _context2.next = 3;\n              return fetchWrapper.fetch({\n                request: request,\n                event: event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins\n              });\n            case 3:\n              response = _context2.sent;\n              cachePutPromise = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request: request,\n                response: response.clone(),\n                event: event,\n                plugins: this._plugins\n              });\n              if (event) {\n                try {\n                  event.waitUntil(cachePutPromise);\n                } catch (error) {\n                  if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache for '\".concat(getFriendlyURL(request.url), \"'.\"));\n                  }\n                }\n              }\n              return _context2.abrupt(\"return\", response);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _getFromNetwork(_x2) {\n        return _getFromNetwork2.apply(this, arguments);\n      }\n      return _getFromNetwork;\n    }()\n  }]);\n  return StaleWhileRevalidate;\n}();\nexport { StaleWhileRevalidate };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","StaleWhileRevalidate","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_fetchOptions","fetchOptions","_matchOptions","matchOptions","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","fetchAndCachePromise","_getFromNetwork","match","response","push","waitUntil","error","warn","url","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","fetch","cachePutPromise","put","clone"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'StaleWhileRevalidate',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n            if (event) {\n                try {\n                    event.waitUntil(fetchAndCachePromise);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork({ request, event }) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: response.clone(),\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}