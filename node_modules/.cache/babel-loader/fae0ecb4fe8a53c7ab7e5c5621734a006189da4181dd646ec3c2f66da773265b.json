{"ast":null,"code":"import _toConsumableArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject) {\n  var ignoreURLParametersMatching = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var _loop = function _loop() {\n    var paramName = _arr[_i];\n    if (ignoreURLParametersMatching.some(function (regExp) {\n      return regExp.test(paramName);\n    })) {\n      urlObject.searchParams.delete(paramName);\n    }\n  };\n  // Convert the iterable into an array at the start of the loop to make sure\n  // deletion doesn't mess up iteration.\n  for (var _i = 0, _arr = _toConsumableArray(urlObject.searchParams.keys()); _i < _arr.length; _i++) {\n    _loop();\n  }\n  return urlObject;\n}","map":{"version":3,"names":["removeIgnoredSearchParams","urlObject","ignoreURLParametersMatching","paramName","some","regExp","test","searchParams","delete","keys"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,yBAAyB,CAACC,SAAS,EAAoC;EAAA,IAAlCC,2BAA2B,uEAAG,EAAE;EAAA,6BAGrB;IAAvD,IAAMC,SAAS;IAChB,IAAID,2BAA2B,CAACE,IAAI,CAAC,UAACC,MAAM;MAAA,OAAKA,MAAM,CAACC,IAAI,CAACH,SAAS,CAAC;IAAA,EAAC,EAAE;MACtEF,SAAS,CAACM,YAAY,CAACC,MAAM,CAACL,SAAS,CAAC;IAC5C;EACJ,CAAC;EAND;EACA;EACA,2CAA4BF,SAAS,CAACM,YAAY,CAACE,IAAI,EAAE;IAAA;EAAA;EAKzD,OAAOR,SAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}