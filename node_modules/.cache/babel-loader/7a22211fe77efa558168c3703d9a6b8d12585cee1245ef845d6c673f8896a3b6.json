{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { precachePlugins } from './utils/precachePlugins.js';\nimport './_version.js';\nvar installListener = function installListener(event) {\n  var precacheController = getOrCreatePrecacheController();\n  var plugins = precachePlugins.get();\n  event.waitUntil(precacheController.install({\n    event: event,\n    plugins: plugins\n  }).catch(function (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(\"Service worker installation failed. It will \" + \"be retried automatically during the next navigation.\");\n    }\n    // Re-throw the error to ensure installation fails.\n    throw error;\n  }));\n};\nvar activateListener = function activateListener(event) {\n  var precacheController = getOrCreatePrecacheController();\n  event.waitUntil(precacheController.activate());\n};\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n  var precacheController = getOrCreatePrecacheController();\n  precacheController.addToCacheList(entries);\n  if (entries.length > 0) {\n    // NOTE: these listeners will only be added once (even if the `precache()`\n    // method is called multiple times) because event listeners are implemented\n    // as a set, where each listener must be unique.\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('install', installListener);\n    self.addEventListener('activate', activateListener);\n  }\n}\nexport { precache };","map":{"version":3,"names":["logger","getOrCreatePrecacheController","precachePlugins","installListener","event","precacheController","plugins","get","waitUntil","install","catch","error","process","env","NODE_ENV","activateListener","activate","precache","entries","addToCacheList","length","self","addEventListener"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-precaching/precache.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { precachePlugins } from './utils/precachePlugins.js';\nimport './_version.js';\nconst installListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    const plugins = precachePlugins.get();\n    event.waitUntil(precacheController.install({ event, plugins })\n        .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Service worker installation failed. It will ` +\n                `be retried automatically during the next navigation.`);\n        }\n        // Re-throw the error to ensure installation fails.\n        throw error;\n    }));\n};\nconst activateListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    event.waitUntil(precacheController.activate());\n};\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.addToCacheList(entries);\n    if (entries.length > 0) {\n        // NOTE: these listeners will only be added once (even if the `precache()`\n        // method is called multiple times) because event listeners are implemented\n        // as a set, where each listener must be unique.\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('install', installListener);\n        self.addEventListener('activate', activateListener);\n    }\n}\nexport { precache };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,6BAA6B,QAAQ,0CAA0C;AACxF,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,OAAO,eAAe;AACtB,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,KAAK,EAAK;EAC/B,IAAMC,kBAAkB,GAAGJ,6BAA6B,EAAE;EAC1D,IAAMK,OAAO,GAAGJ,eAAe,CAACK,GAAG,EAAE;EACrCH,KAAK,CAACI,SAAS,CAACH,kBAAkB,CAACI,OAAO,CAAC;IAAEL,KAAK,EAALA,KAAK;IAAEE,OAAO,EAAPA;EAAQ,CAAC,CAAC,CACzDI,KAAK,CAAC,UAACC,KAAK,EAAK;IAClB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCd,MAAM,CAACW,KAAK,CAAC,uGAC6C,CAAC;IAC/D;IACA;IACA,MAAMA,KAAK;EACf,CAAC,CAAC,CAAC;AACP,CAAC;AACD,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIX,KAAK,EAAK;EAChC,IAAMC,kBAAkB,GAAGJ,6BAA6B,EAAE;EAC1DG,KAAK,CAACI,SAAS,CAACH,kBAAkB,CAACW,QAAQ,EAAE,CAAC;AAClD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAACC,OAAO,EAAE;EACvB,IAAMb,kBAAkB,GAAGJ,6BAA6B,EAAE;EAC1DI,kBAAkB,CAACc,cAAc,CAACD,OAAO,CAAC;EAC1C,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IACpB;IACA;IACA;IACA;IACAC,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAEnB,eAAe,CAAC;IACjDkB,IAAI,CAACC,gBAAgB,CAAC,UAAU,EAAEP,gBAAgB,CAAC;EACvD;AACJ;AACA,SAASE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}