{"ast":null,"code":"import _toConsumableArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nvar PrecacheController = /*#__PURE__*/function () {\n  /**\n   * Create a new PrecacheController.\n   *\n   * @param {string} [cacheName] An optional name for the cache, to override\n   * the default precache name.\n   */\n  function PrecacheController(cacheName) {\n    _classCallCheck(this, PrecacheController);\n    this._cacheName = cacheNames.getPrecacheName(cacheName);\n    this._urlsToCacheKeys = new Map();\n    this._urlsToCacheModes = new Map();\n    this._cacheKeysToIntegrities = new Map();\n  }\n  /**\n   * This method will add items to the precache list, removing duplicates\n   * and ensuring the information is valid.\n   *\n   * @param {\n   * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\n   * } entries Array of entries to precache.\n   */\n  _createClass(PrecacheController, [{\n    key: \"addToCacheList\",\n    value: function addToCacheList(entries) {\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isArray(entries, {\n          moduleName: 'workbox-precaching',\n          className: 'PrecacheController',\n          funcName: 'addToCacheList',\n          paramName: 'entries'\n        });\n      }\n      var urlsToWarnAbout = [];\n      var _iterator = _createForOfIteratorHelper(entries),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n          // See https://github.com/GoogleChrome/workbox/issues/2259\n          if (typeof entry === 'string') {\n            urlsToWarnAbout.push(entry);\n          } else if (entry && entry.revision === undefined) {\n            urlsToWarnAbout.push(entry.url);\n          }\n          var _createCacheKey = createCacheKey(entry),\n            cacheKey = _createCacheKey.cacheKey,\n            url = _createCacheKey.url;\n          var cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n          if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) {\n            throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n              firstEntry: this._urlsToCacheKeys.get(url),\n              secondEntry: cacheKey\n            });\n          }\n          if (typeof entry !== 'string' && entry.integrity) {\n            if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n              throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                url: url\n              });\n            }\n            this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n          }\n          this._urlsToCacheKeys.set(url, cacheKey);\n          this._urlsToCacheModes.set(url, cacheMode);\n          if (urlsToWarnAbout.length > 0) {\n            var warningMessage = \"Workbox is precaching URLs without revision \" + \"info: \".concat(urlsToWarnAbout.join(', '), \"\\nThis is generally NOT safe. \") + \"Learn more at https://bit.ly/wb-precache\";\n            if (process.env.NODE_ENV === 'production') {\n              // Use console directly to display this warning without bloating\n              // bundle sizes by pulling in all of the logger codebase in prod.\n              console.warn(warningMessage);\n            } else {\n              logger.warn(warningMessage);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * @param {Object} options\n     * @param {Event} [options.event] The install event (if needed).\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\n     * and caching during install.\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n  }, {\n    key: \"install\",\n    value: function () {\n      var _install = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this = this;\n        var _ref,\n          event,\n          plugins,\n          toBePrecached,\n          alreadyPrecached,\n          cache,\n          alreadyCachedRequests,\n          existingCacheKeys,\n          _iterator2,\n          _step2,\n          _step2$value,\n          url,\n          cacheKey,\n          precacheRequests,\n          updatedURLs,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, event = _ref.event, plugins = _ref.plugins;\n              if (process.env.NODE_ENV !== 'production') {\n                if (plugins) {\n                  assert.isArray(plugins, {\n                    moduleName: 'workbox-precaching',\n                    className: 'PrecacheController',\n                    funcName: 'install',\n                    paramName: 'plugins'\n                  });\n                }\n              }\n              toBePrecached = [];\n              alreadyPrecached = [];\n              _context.next = 6;\n              return self.caches.open(this._cacheName);\n            case 6:\n              cache = _context.sent;\n              _context.next = 9;\n              return cache.keys();\n            case 9:\n              alreadyCachedRequests = _context.sent;\n              existingCacheKeys = new Set(alreadyCachedRequests.map(function (request) {\n                return request.url;\n              }));\n              _iterator2 = _createForOfIteratorHelper(this._urlsToCacheKeys);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  _step2$value = _slicedToArray(_step2.value, 2), url = _step2$value[0], cacheKey = _step2$value[1];\n                  if (existingCacheKeys.has(cacheKey)) {\n                    alreadyPrecached.push(url);\n                  } else {\n                    toBePrecached.push({\n                      cacheKey: cacheKey,\n                      url: url\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              precacheRequests = toBePrecached.map(function (_ref2) {\n                var cacheKey = _ref2.cacheKey,\n                  url = _ref2.url;\n                var integrity = _this._cacheKeysToIntegrities.get(cacheKey);\n                var cacheMode = _this._urlsToCacheModes.get(url);\n                return _this._addURLToCache({\n                  cacheKey: cacheKey,\n                  cacheMode: cacheMode,\n                  event: event,\n                  integrity: integrity,\n                  plugins: plugins,\n                  url: url\n                });\n              });\n              _context.next = 16;\n              return Promise.all(precacheRequests);\n            case 16:\n              updatedURLs = toBePrecached.map(function (item) {\n                return item.url;\n              });\n              if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, alreadyPrecached);\n              }\n              return _context.abrupt(\"return\", {\n                updatedURLs: updatedURLs,\n                notUpdatedURLs: alreadyPrecached\n              });\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function install() {\n        return _install.apply(this, arguments);\n      }\n      return install;\n    }()\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n  }, {\n    key: \"activate\",\n    value: function () {\n      var _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var cache, currentlyCachedRequests, expectedCacheKeys, deletedURLs, _iterator3, _step3, request;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return self.caches.open(this._cacheName);\n            case 2:\n              cache = _context2.sent;\n              _context2.next = 5;\n              return cache.keys();\n            case 5:\n              currentlyCachedRequests = _context2.sent;\n              expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n              deletedURLs = [];\n              _iterator3 = _createForOfIteratorHelper(currentlyCachedRequests);\n              _context2.prev = 9;\n              _iterator3.s();\n            case 11:\n              if ((_step3 = _iterator3.n()).done) {\n                _context2.next = 19;\n                break;\n              }\n              request = _step3.value;\n              if (expectedCacheKeys.has(request.url)) {\n                _context2.next = 17;\n                break;\n              }\n              _context2.next = 16;\n              return cache.delete(request);\n            case 16:\n              deletedURLs.push(request.url);\n            case 17:\n              _context2.next = 11;\n              break;\n            case 19:\n              _context2.next = 24;\n              break;\n            case 21:\n              _context2.prev = 21;\n              _context2.t0 = _context2[\"catch\"](9);\n              _iterator3.e(_context2.t0);\n            case 24:\n              _context2.prev = 24;\n              _iterator3.f();\n              return _context2.finish(24);\n            case 27:\n              if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n              }\n              return _context2.abrupt(\"return\", {\n                deletedURLs: deletedURLs\n              });\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[9, 21, 24, 27]]);\n      }));\n      function activate() {\n        return _activate.apply(this, arguments);\n      }\n      return activate;\n    }()\n    /**\n     * Requests the entry and saves it to the cache if the response is valid.\n     * By default, any response with a status code of less than 400 (including\n     * opaque responses) is considered valid.\n     *\n     * If you need to use custom criteria to determine what's valid and what\n     * isn't, then pass in an item in `options.plugins` that implements the\n     * `cacheWillUpdate()` lifecycle event.\n     *\n     * @private\n     * @param {Object} options\n     * @param {string} options.cacheKey The string to use a cache key.\n     * @param {string} options.url The URL to fetch and cache.\n     * @param {string} [options.cacheMode] The cache mode for the network request.\n     * @param {Event} [options.event] The install event (if passed).\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\n     * fetch and caching.\n     * @param {string} [options.integrity] The value to use for the `integrity`\n     * field when making the request.\n     */\n  }, {\n    key: \"_addURLToCache\",\n    value: function () {\n      var _addURLToCache2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref3) {\n        var cacheKey, url, cacheMode, event, plugins, integrity, request, response, cacheWillUpdatePlugin, _iterator4, _step4, plugin, isValidResponse;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              cacheKey = _ref3.cacheKey, url = _ref3.url, cacheMode = _ref3.cacheMode, event = _ref3.event, plugins = _ref3.plugins, integrity = _ref3.integrity;\n              request = new Request(url, {\n                integrity: integrity,\n                cache: cacheMode,\n                credentials: 'same-origin'\n              });\n              _context3.next = 4;\n              return fetchWrapper.fetch({\n                event: event,\n                plugins: plugins,\n                request: request\n              });\n            case 4:\n              response = _context3.sent;\n              _iterator4 = _createForOfIteratorHelper(plugins || []);\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  plugin = _step4.value;\n                  if ('cacheWillUpdate' in plugin) {\n                    cacheWillUpdatePlugin = plugin;\n                  }\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              if (!cacheWillUpdatePlugin) {\n                _context3.next = 13;\n                break;\n              }\n              _context3.next = 10;\n              return cacheWillUpdatePlugin.cacheWillUpdate({\n                event: event,\n                request: request,\n                response: response\n              });\n            case 10:\n              _context3.t0 = _context3.sent;\n              _context3.next = 14;\n              break;\n            case 13:\n              _context3.t0 =\n              // Otherwise, default to considering any response status under 400 valid.\n              // This includes, by default, considering opaque responses valid.\n              response.status < 400;\n            case 14:\n              isValidResponse = _context3.t0;\n              if (isValidResponse) {\n                _context3.next = 17;\n                break;\n              }\n              throw new WorkboxError('bad-precaching-response', {\n                url: url,\n                status: response.status\n              });\n            case 17:\n              if (!response.redirected) {\n                _context3.next = 21;\n                break;\n              }\n              _context3.next = 20;\n              return copyResponse(response);\n            case 20:\n              response = _context3.sent;\n            case 21:\n              _context3.next = 23;\n              return cacheWrapper.put({\n                event: event,\n                plugins: plugins,\n                response: response,\n                // `request` already uses `url`. We may be able to reuse it.\n                request: cacheKey === url ? request : new Request(cacheKey),\n                cacheName: this._cacheName,\n                matchOptions: {\n                  ignoreSearch: true\n                }\n              });\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _addURLToCache(_x) {\n        return _addURLToCache2.apply(this, arguments);\n      }\n      return _addURLToCache;\n    }()\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n  }, {\n    key: \"getURLsToCacheKeys\",\n    value: function getURLsToCacheKeys() {\n      return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n  }, {\n    key: \"getCachedURLs\",\n    value: function getCachedURLs() {\n      return _toConsumableArray(this._urlsToCacheKeys.keys());\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n  }, {\n    key: \"getCacheKeyForURL\",\n    value: function getCacheKeyForURL(url) {\n      var urlObject = new URL(url, location.href);\n      return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n  }, {\n    key: \"matchPrecache\",\n    value: function () {\n      var _matchPrecache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request) {\n        var url, cacheKey, cache;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              url = request instanceof Request ? request.url : request;\n              cacheKey = this.getCacheKeyForURL(url);\n              if (!cacheKey) {\n                _context4.next = 7;\n                break;\n              }\n              _context4.next = 5;\n              return self.caches.open(this._cacheName);\n            case 5:\n              cache = _context4.sent;\n              return _context4.abrupt(\"return\", cache.match(cacheKey));\n            case 7:\n              return _context4.abrupt(\"return\", undefined);\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function matchPrecache(_x2) {\n        return _matchPrecache.apply(this, arguments);\n      }\n      return matchPrecache;\n    }()\n    /**\n     * Returns a function that can be used within a\n     * {@link module:workbox-routing.Route} that will find a response for the\n     * incoming request against the precache.\n     *\n     * If for an unexpected reason there is a cache miss for the request,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n  }, {\n    key: \"createHandler\",\n    value: function createHandler() {\n      var _this2 = this;\n      var fallbackToNetwork = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref4) {\n          var request, response;\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                request = _ref4.request;\n                _context5.prev = 1;\n                _context5.next = 4;\n                return _this2.matchPrecache(request);\n              case 4:\n                response = _context5.sent;\n                if (!response) {\n                  _context5.next = 7;\n                  break;\n                }\n                return _context5.abrupt(\"return\", response);\n              case 7:\n                throw new WorkboxError('missing-precache-entry', {\n                  cacheName: _this2._cacheName,\n                  url: request instanceof Request ? request.url : request\n                });\n              case 10:\n                _context5.prev = 10;\n                _context5.t0 = _context5[\"catch\"](1);\n                if (!fallbackToNetwork) {\n                  _context5.next = 15;\n                  break;\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Unable to respond with precached response. \" + \"Falling back to network.\", _context5.t0);\n                }\n                return _context5.abrupt(\"return\", fetch(request));\n              case 15:\n                throw _context5.t0;\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5, null, [[1, 10]]);\n        }));\n        return function (_x3) {\n          return _ref5.apply(this, arguments);\n        };\n      }();\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * If for an unexpected reason there is a cache miss when looking up `url`,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n  }, {\n    key: \"createHandlerBoundToURL\",\n    value: function createHandlerBoundToURL(url) {\n      var fallbackToNetwork = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var cacheKey = this.getCacheKeyForURL(url);\n      if (!cacheKey) {\n        throw new WorkboxError('non-precached-url', {\n          url: url\n        });\n      }\n      var handler = this.createHandler(fallbackToNetwork);\n      var request = new Request(url);\n      return function () {\n        return handler({\n          request: request\n        });\n      };\n    }\n  }]);\n  return PrecacheController;\n}();\nexport { PrecacheController };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","logger","WorkboxError","copyResponse","createCacheKey","printCleanupDetails","printInstallDetails","PrecacheController","cacheName","_cacheName","getPrecacheName","_urlsToCacheKeys","Map","_urlsToCacheModes","_cacheKeysToIntegrities","entries","process","env","NODE_ENV","isArray","moduleName","className","funcName","paramName","urlsToWarnAbout","entry","push","revision","undefined","url","cacheKey","cacheMode","has","get","firstEntry","secondEntry","integrity","set","length","warningMessage","join","console","warn","event","plugins","toBePrecached","alreadyPrecached","self","caches","open","cache","keys","alreadyCachedRequests","existingCacheKeys","Set","map","request","precacheRequests","_addURLToCache","Promise","all","updatedURLs","item","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","delete","Request","credentials","fetch","response","plugin","cacheWillUpdatePlugin","cacheWillUpdate","status","isValidResponse","redirected","put","matchOptions","ignoreSearch","urlObject","URL","location","href","getCacheKeyForURL","match","fallbackToNetwork","matchPrecache","debug","handler","createHandler"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-precaching/PrecacheController.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {string} [cacheName] An optional name for the cache, to override\n     * the default precache name.\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheNames.getPrecacheName(cacheName);\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {\n     * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\n     * } entries Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\n                'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * @param {Object} options\n     * @param {Event} [options.event] The install event (if needed).\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\n     * and caching during install.\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n    async install({ event, plugins } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (plugins) {\n                assert.isArray(plugins, {\n                    moduleName: 'workbox-precaching',\n                    className: 'PrecacheController',\n                    funcName: 'install',\n                    paramName: 'plugins',\n                });\n            }\n        }\n        const toBePrecached = [];\n        const alreadyPrecached = [];\n        const cache = await self.caches.open(this._cacheName);\n        const alreadyCachedRequests = await cache.keys();\n        const existingCacheKeys = new Set(alreadyCachedRequests.map((request) => request.url));\n        for (const [url, cacheKey] of this._urlsToCacheKeys) {\n            if (existingCacheKeys.has(cacheKey)) {\n                alreadyPrecached.push(url);\n            }\n            else {\n                toBePrecached.push({ cacheKey, url });\n            }\n        }\n        const precacheRequests = toBePrecached.map(({ cacheKey, url }) => {\n            const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n            const cacheMode = this._urlsToCacheModes.get(url);\n            return this._addURLToCache({\n                cacheKey,\n                cacheMode,\n                event,\n                integrity,\n                plugins,\n                url,\n            });\n        });\n        await Promise.all(precacheRequests);\n        const updatedURLs = toBePrecached.map((item) => item.url);\n        if (process.env.NODE_ENV !== 'production') {\n            printInstallDetails(updatedURLs, alreadyPrecached);\n        }\n        return {\n            updatedURLs,\n            notUpdatedURLs: alreadyPrecached,\n        };\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n    async activate() {\n        const cache = await self.caches.open(this._cacheName);\n        const currentlyCachedRequests = await cache.keys();\n        const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n        const deletedURLs = [];\n        for (const request of currentlyCachedRequests) {\n            if (!expectedCacheKeys.has(request.url)) {\n                await cache.delete(request);\n                deletedURLs.push(request.url);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            printCleanupDetails(deletedURLs);\n        }\n        return { deletedURLs };\n    }\n    /**\n     * Requests the entry and saves it to the cache if the response is valid.\n     * By default, any response with a status code of less than 400 (including\n     * opaque responses) is considered valid.\n     *\n     * If you need to use custom criteria to determine what's valid and what\n     * isn't, then pass in an item in `options.plugins` that implements the\n     * `cacheWillUpdate()` lifecycle event.\n     *\n     * @private\n     * @param {Object} options\n     * @param {string} options.cacheKey The string to use a cache key.\n     * @param {string} options.url The URL to fetch and cache.\n     * @param {string} [options.cacheMode] The cache mode for the network request.\n     * @param {Event} [options.event] The install event (if passed).\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\n     * fetch and caching.\n     * @param {string} [options.integrity] The value to use for the `integrity`\n     * field when making the request.\n     */\n    async _addURLToCache({ cacheKey, url, cacheMode, event, plugins, integrity }) {\n        const request = new Request(url, {\n            integrity,\n            cache: cacheMode,\n            credentials: 'same-origin',\n        });\n        let response = await fetchWrapper.fetch({\n            event,\n            plugins,\n            request,\n        });\n        // Allow developers to override the default logic about what is and isn't\n        // valid by passing in a plugin implementing cacheWillUpdate(), e.g.\n        // a `CacheableResponsePlugin` instance.\n        let cacheWillUpdatePlugin;\n        for (const plugin of (plugins || [])) {\n            if ('cacheWillUpdate' in plugin) {\n                cacheWillUpdatePlugin = plugin;\n            }\n        }\n        const isValidResponse = cacheWillUpdatePlugin ?\n            // Use a callback if provided. It returns a truthy value if valid.\n            // NOTE: invoke the method on the plugin instance so the `this` context\n            // is correct.\n            await cacheWillUpdatePlugin.cacheWillUpdate({ event, request, response }) :\n            // Otherwise, default to considering any response status under 400 valid.\n            // This includes, by default, considering opaque responses valid.\n            response.status < 400;\n        // Consider this a failure, leading to the `install` handler failing, if\n        // we get back an invalid response.\n        if (!isValidResponse) {\n            throw new WorkboxError('bad-precaching-response', {\n                url,\n                status: response.status,\n            });\n        }\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        if (response.redirected) {\n            response = await copyResponse(response);\n        }\n        await cacheWrapper.put({\n            event,\n            plugins,\n            response,\n            // `request` already uses `url`. We may be able to reuse it.\n            request: cacheKey === url ? request : new Request(cacheKey),\n            cacheName: this._cacheName,\n            matchOptions: {\n                ignoreSearch: true,\n            },\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this._cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that can be used within a\n     * {@link module:workbox-routing.Route} that will find a response for the\n     * incoming request against the precache.\n     *\n     * If for an unexpected reason there is a cache miss for the request,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandler(fallbackToNetwork = true) {\n        return async ({ request }) => {\n            try {\n                const response = await this.matchPrecache(request);\n                if (response) {\n                    return response;\n                }\n                // This shouldn't normally happen, but there are edge cases:\n                // https://github.com/GoogleChrome/workbox/issues/1441\n                throw new WorkboxError('missing-precache-entry', {\n                    cacheName: this._cacheName,\n                    url: request instanceof Request ? request.url : request,\n                });\n            }\n            catch (error) {\n                if (fallbackToNetwork) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.debug(`Unable to respond with precached response. ` +\n                            `Falling back to network.`, error);\n                    }\n                    return fetch(request);\n                }\n                throw error;\n            }\n        };\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * If for an unexpected reason there is a cache miss when looking up `url`,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url, fallbackToNetwork = true) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        const handler = this.createHandler(fallbackToNetwork);\n        const request = new Request(url);\n        return () => handler({ request });\n    }\n}\nexport { PrecacheController };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}