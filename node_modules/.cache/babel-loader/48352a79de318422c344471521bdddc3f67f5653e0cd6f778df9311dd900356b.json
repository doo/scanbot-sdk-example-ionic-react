{"ast":null,"code":"import _assertThisInitialized from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nvar scopeId;\nvar contentRef;\nvar hostTagName;\nvar customError;\nvar i = 0;\nvar useNativeShadowDom = false;\nvar checkSlotFallbackVisibility = false;\nvar checkSlotRelocate = false;\nvar isSvgMode = false;\nvar renderingRef = null;\nvar queueCongestion = 0;\nvar queuePending = false;\n/*\n Stencil Client Platform v2.21.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nvar Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\nvar Context = {};\nvar getAssetPath = function getAssetPath(path) {\n  var assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nvar setAssetPath = function setAssetPath(path) {\n  return plt.$resourcesUrl$ = path;\n};\nvar createTime = function createTime(fnName) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (BUILD.profile && performance.mark) {\n    var key = \"st:\".concat(fnName, \":\").concat(tagName, \":\").concat(i++);\n    // Start\n    performance.mark(key);\n    // End\n    return function () {\n      return performance.measure(\"[Stencil] \".concat(fnName, \"() <\").concat(tagName, \">\"), key);\n    };\n  } else {\n    return function () {\n      return;\n    };\n  }\n};\nvar uniqueTime = function uniqueTime(key, measureText) {\n  if (BUILD.profile && performance.mark) {\n    if (performance.getEntriesByName(key).length === 0) {\n      performance.mark(key);\n    }\n    return function () {\n      if (performance.getEntriesByName(measureText).length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return function () {\n      return;\n    };\n  }\n};\nvar inspect = function inspect(ref) {\n  var _ref2;\n  var hostRef = getHostRef(ref);\n  if (!hostRef) {\n    return undefined;\n  }\n  var flags = hostRef.$flags$;\n  var hostElement = hostRef.$hostElement$;\n  return _ref2 = {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n      hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n      isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n      isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n      isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n      hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n      hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n      isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n      isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n      needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */)\n    },\n\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement: hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$\n  }, _defineProperty(_ref2, 's-id', hostElement['s-id']), _defineProperty(_ref2, 's-cr', hostElement['s-cr']), _defineProperty(_ref2, 's-lr', hostElement['s-lr']), _defineProperty(_ref2, 's-p', hostElement['s-p']), _defineProperty(_ref2, 's-rc', hostElement['s-rc']), _defineProperty(_ref2, 's-sc', hostElement['s-sc']), _ref2;\n};\nvar installDevTools = function installDevTools() {\n  if (BUILD.devTools) {\n    var stencil = win.stencil = win.stencil || {};\n    var originalInspect = stencil.inspect;\n    stencil.inspect = function (ref) {\n      var result = inspect(ref);\n      if (!result && typeof originalInspect === 'function') {\n        result = originalInspect(ref);\n      }\n      return result;\n    };\n  }\n};\nvar CONTENT_REF_ID = 'r';\nvar ORG_LOCATION_ID = 'o';\nvar SLOT_NODE_ID = 's';\nvar TEXT_NODE_ID = 't';\nvar HYDRATE_ID = 's-id';\nvar HYDRATED_STYLE_ID = 'sty-id';\nvar HYDRATE_CHILD_ID = 'c-id';\nvar HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nvar XLINK_NS = 'http://www.w3.org/1999/xlink';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nvar EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nvar SVG_NS = 'http://www.w3.org/2000/svg';\nvar HTML_NS = 'http://www.w3.org/1999/xhtml';\nvar isDef = function isDef(v) {\n  return v != null;\n};\nvar isComplexType = function isComplexType(o) {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nvar h = function h(nodeName, vnodeData) {\n  var child = null;\n  var key = null;\n  var slotName = null;\n  var simple = false;\n  var lastSimple = false;\n  var vNodeChildren = [];\n  var walk = function walk(c) {\n    for (var _i = 0; _i < c.length; _i++) {\n      child = c[_i];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n          consoleDevError(\"vNode passed as children has unexpected type.\\nMake sure it's using the correct h() function.\\nEmpty objects can also be the cause, look for JSX comments that became objects.\");\n        }\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n  walk(children);\n  if (vnodeData) {\n    if (BUILD.isDev && nodeName === 'input') {\n      validateInputProperties(vnodeData);\n    }\n    // normalize class / classname attributes\n    if (BUILD.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n    if (BUILD.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n    if (BUILD.vdomClass) {\n      var classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(function (k) {\n          return classData[k];\n        }).join(' ');\n      }\n    }\n  }\n  if (BUILD.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(\"The <Host> must be the single root component. Make sure:\\n- You are NOT using hostData() and <Host> in the same component.\\n- <Host> is used once, and it's the single root component of the render() function.\");\n  }\n  if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n  var vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = key;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\nvar newVNode = function newVNode(tag, text) {\n  var vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  if (BUILD.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = null;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\nvar Host = {};\nvar isHost = function isHost(node) {\n  return node && node.$tag$ === Host;\n};\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nvar vdomFnUtils = {\n  forEach: function forEach(children, cb) {\n    return children.map(convertToPublic).forEach(cb);\n  },\n  map: function map(children, cb) {\n    return children.map(convertToPublic).map(cb).map(convertToPrivate);\n  }\n};\nvar convertToPublic = function convertToPublic(node) {\n  return {\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$\n  };\n};\nvar convertToPrivate = function convertToPrivate(node) {\n  if (typeof node.vtag === 'function') {\n    var vnodeData = Object.assign({}, node.vattrs);\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n    return h.apply(void 0, [node.vtag, vnodeData].concat(_toConsumableArray(node.vchildren || [])));\n  }\n  var vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nvar validateInputProperties = function validateInputProperties(inputElm) {\n  var props = Object.keys(inputElm);\n  var value = props.indexOf('value');\n  if (value === -1) {\n    return;\n  }\n  var typeIndex = props.indexOf('type');\n  var minIndex = props.indexOf('min');\n  var maxIndex = props.indexOf('max');\n  var stepIndex = props.indexOf('step');\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(\"The \\\"value\\\" prop of <input> should be set after \\\"min\\\", \\\"max\\\", \\\"type\\\" and \\\"step\\\"\");\n  }\n};\nvar initializeClientHydrate = function initializeClientHydrate(hostElm, tagName, hostId, hostRef) {\n  var endHydrate = createTime('hydrateClient', tagName);\n  var shadowRoot = hostElm.shadowRoot;\n  var childRenderNodes = [];\n  var slotNodes = [];\n  var shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n  var vnode = hostRef.$vnode$ = newVNode(tagName, null);\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(function (c) {\n    var orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    var orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    var node = c.$elm$;\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n  if (BUILD.shadowDom && shadowRoot) {\n    shadowRootNodes.map(function (shadowRootNode) {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n  endHydrate();\n};\nvar clientHydrate = function clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) {\n  var childNodeType;\n  var childIdSplt;\n  var childVNode;\n  var i;\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID);\n        // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        }\n        // add our child vnode to a specific index of the vnode's children\n        parentVNode.$children$[childVNode.$index$] = childVNode;\n        // this is now the new parent vnode for all the next child checks\n        parentVNode = childVNode;\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    }\n    // recursively drill down, end to start so we can remove nodes\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode);\n          // remove the text comment since it's no longer needed\n          node.remove();\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifcally for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n          node['s-sr'] = true;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            }\n            // insert the new slot element before the slot comment\n            node.parentNode.insertBefore(childVNode.$elm$, node);\n            // remove the slot comment since it's not needed for shadow\n            node.remove();\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n          slotNodes.push(childVNode);\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else if (BUILD.slotRelocation) {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    var vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\nvar initializeDocumentHydrate = function initializeDocumentHydrate(node, orgLocNodes) {\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    var _i2 = 0;\n    for (; _i2 < node.childNodes.length; _i2++) {\n      initializeDocumentHydrate(node.childNodes[_i2], orgLocNodes);\n    }\n    if (node.shadowRoot) {\n      for (_i2 = 0; _i2 < node.shadowRoot.childNodes.length; _i2++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[_i2], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    var childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = '';\n      // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n};\n// Private\nvar computeMode = function computeMode(elm) {\n  return modeResolutionChain.map(function (h) {\n    return h(elm);\n  }).find(function (m) {\n    return !!m;\n  });\n};\n// Public\nvar setMode = function setMode(handler) {\n  return modeResolutionChain.push(handler);\n};\nvar getMode = function getMode(ref) {\n  return getHostRef(ref).$modeName$;\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nvar parsePropertyValue = function parsePropertyValue(propValue, propType) {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n    if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n    if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    }\n    // redundant return here for better minification\n    return propValue;\n  }\n  // not sure exactly what type we want\n  // so no need to change to a different type\n  return propValue;\n};\nvar getElement = function getElement(ref) {\n  return BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\n};\nvar createEvent = function createEvent(ref, name, flags) {\n  var elm = getElement(ref);\n  return {\n    emit: function emit(detail) {\n      if (BUILD.isDev && !elm.isConnected) {\n        consoleDevWarn(\"The \\\"\".concat(name, \"\\\" event was emitted, but the dispatcher node is no longer connected to the dom.\"));\n      }\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n        composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n        cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n        detail: detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nvar emitEvent = function emitEvent(elm, name, opts) {\n  var ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\nvar rootAppliedStyles = /*@__PURE__*/new WeakMap();\nvar registerStyle = function registerStyle(scopeId, cssText, allowCS) {\n  var style = styles.get(scopeId);\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    if (typeof style === 'string') {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId, style);\n};\nvar addStyle = function addStyle(styleContainerNode, cmpMeta, mode, hostElm) {\n  var scopeId = getScopeId(cmpMeta, mode);\n  var style = styles.get(scopeId);\n  if (!BUILD.attachStyles) {\n    return scopeId;\n  }\n  // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n  styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      var appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      var styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n      if (!appliedStyles.has(scopeId)) {\n        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(\"[\".concat(HYDRATED_STYLE_ID, \"=\\\"\").concat(scopeId, \"\\\"]\")))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          if (BUILD.cssVarShim && plt.$cssShim$) {\n            styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* CMP_FLAGS.needsScopedEncapsulation */));\n            var newScopeId = styleElm['s-sc'];\n            if (newScopeId) {\n              scopeId = newScopeId;\n              // we don't want to add this styleID to the appliedStyles Set\n              // since the cssVarShim might need to apply several different\n              // stylesheets for the same component\n              appliedStyles = null;\n            }\n          } else {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [].concat(_toConsumableArray(styleContainerNode.adoptedStyleSheets), [style]);\n    }\n  }\n  return scopeId;\n};\nvar attachStyles = function attachStyles(hostRef) {\n  var cmpMeta = hostRef.$cmpMeta$;\n  var elm = hostRef.$hostElement$;\n  var flags = cmpMeta.$flags$;\n  var endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  var scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n    if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n  endAttachStyles();\n};\nvar getScopeId = function getScopeId(cmp, mode) {\n  return 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n};\nvar convertScopedToShadow = function convertScopedToShadow(css) {\n  return css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nvar setAccessor = function setAccessor(elm, memberName, oldValue, newValue, isSvg, flags) {\n  if (oldValue !== newValue) {\n    var isProp = isMemberInElement(elm, memberName);\n    var ln = memberName.toLowerCase();\n    if (BUILD.vdomClass && memberName === 'class') {\n      var classList = elm.classList;\n      var oldClasses = parseClassList(oldValue);\n      var newClasses = parseClassList(newValue);\n      classList.remove.apply(classList, _toConsumableArray(oldClasses.filter(function (c) {\n        return c && !newClasses.includes(c);\n      })));\n      classList.add.apply(classList, _toConsumableArray(newClasses.filter(function (c) {\n        return c && !oldClasses.includes(c);\n      })));\n    } else if (BUILD.vdomStyle && memberName === 'style') {\n      // update style attribute, css properties and values\n      if (BUILD.updatable) {\n        for (var prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (!BUILD.hydrateServerSide && prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n      for (var _prop in newValue) {\n        if (!oldValue || newValue[_prop] !== oldValue[_prop]) {\n          if (!BUILD.hydrateServerSide && _prop.includes('-')) {\n            elm.style.setProperty(_prop, newValue[_prop]);\n          } else {\n            elm.style[_prop] = newValue[_prop];\n          }\n        }\n      }\n    } else if (BUILD.vdomKey && memberName === 'key') ;else if (BUILD.vdomRef && memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else if (BUILD.vdomPropOrAttr) {\n      // Set property if it exists and it's not a SVG\n      var isComplex = isComplexType(newValue);\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            var n = newValue == null ? '' : newValue;\n            // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n      var xlink = false;\n      if (BUILD.vdomXlink) {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (BUILD.vdomXlink && xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        if (BUILD.vdomXlink && xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\nvar parseClassListRegex = /\\s/;\nvar parseClassList = function parseClassList(value) {\n  return !value ? [] : value.split(parseClassListRegex);\n};\nvar updateElement = function updateElement(oldVnode, newVnode, isSvgMode, memberName) {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  var elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  var oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  var newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  if (BUILD.updatable) {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  }\n  // add new & update changed attributes\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nvar createElm = function createElm(oldParentVNode, newParentVNode, childIndex, parentElm) {\n  // tslint:disable-next-line: prefer-const\n  var newVNode = newParentVNode.$children$[childIndex];\n  var i = 0;\n  var elm;\n  var childNode;\n  var oldVNode;\n  if (BUILD.slotRelocation && !useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n      newVNode.$flags$ |= newVNode.$children$ ?\n      // slot element has fallback content\n      2 /* VNODE_FLAGS.isSlotFallback */ :\n      // slot element does not have fallback content\n      1 /* VNODE_FLAGS.isSlotReference */;\n    }\n  }\n\n  if (BUILD.isDev && newVNode.$elm$) {\n    consoleDevError(\"The JSX \".concat(newVNode.$text$ !== null ? \"\\\"\".concat(newVNode.$text$, \"\\\" text\") : \"\\\"\".concat(newVNode.$tag$, \"\\\" element\"), \" node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes\"));\n  }\n  if (BUILD.vdomText && newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n  } else {\n    if (BUILD.svg && !isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    }\n    // create element\n    elm = newVNode.$elm$ = BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */ ? 'slot-fb' : newVNode.$tag$) : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */ ? 'slot-fb' : newVNode.$tag$);\n    if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    }\n    // add css classes, attrs, props, listeners, etc.\n    if (BUILD.vdomAttribute) {\n      updateElement(null, newVNode, isSvgMode);\n    }\n    if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm);\n        // return node could have been null\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n    if (BUILD.svg) {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n  if (BUILD.slotRelocation) {\n    elm['s-hn'] = hostTagName;\n    if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n      // remember the content reference comment\n      elm['s-sr'] = true;\n      // remember the content reference comment\n      elm['s-cr'] = contentRef;\n      // remember the slot name, or empty string for default slot\n      elm['s-sn'] = newVNode.$name$ || '';\n      // check if we've got an old vnode for this slot\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\nvar putBackInOriginalLocation = function putBackInOriginalLocation(parentElm, recursive) {\n  plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n  var oldSlotChildNodes = parentElm.childNodes;\n  for (var _i3 = oldSlotChildNodes.length - 1; _i3 >= 0; _i3--) {\n    var childNode = oldSlotChildNodes[_i3];\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n      // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n  plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\n\nvar addVnodes = function addVnodes(parentElm, before, parentVNode, vnodes, startIdx, endIdx) {\n  var containerElm = BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  var childNode;\n  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\nvar removeVnodes = function removeVnodes(vnodes, startIdx, endIdx, vnode, elm) {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n      if (BUILD.slotRelocation) {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      }\n      // remove the vnode's element from the dom\n      elm.remove();\n    }\n  }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nvar updateChildren = function updateChildren(parentElm, oldCh, newVNode, newCh) {\n  var oldStartIdx = 0;\n  var newStartIdx = 0;\n  var idxInOld = 0;\n  var i = 0;\n  var oldEndIdx = oldCh.length - 1;\n  var oldStartVnode = oldCh[0];\n  var oldEndVnode = oldCh[oldEndIdx];\n  var newEndIdx = newCh.length - 1;\n  var newStartVnode = newCh[0];\n  var newEndVnode = newCh[newEndIdx];\n  var node;\n  var elmToMove;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // VNode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      // if the start nodes are the same then we should patch the new VNode\n      // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n      // indices to reflect that. We don't need to move any DOM Nodes around\n      // since things are matched up in order.\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      // likewise, if the end nodes are the same we patch new onto old and\n      // decrement our end indices, and also likewise in this case we don't\n      // need to move any DOM Nodes.\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // case: \"Vnode moved right\"\n      //\n      // We've found that the last node in our window on the new children is\n      // the same VNode as the _first_ node in our window on the old children\n      // we're dealing with now. Visually, this is the layout of these two\n      // nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n      // and move the DOM element for `oldStartVnode`.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n      patch(oldStartVnode, newEndVnode);\n      // We need to move the element for `oldStartVnode` into a position which\n      // will be appropriate for `newEndVnode`. For this we can use\n      // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n      // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n      // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n      //\n      // <old-start-node />\n      // <some-intervening-node />\n      // <old-end-node />\n      // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n      // <next-sibling />\n      //\n      // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n      // the node for `oldStartVnode` at the end of the children of\n      // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n      // aren't any siblings, and passing `null` to `Node.insertBefore` will\n      // append it to the children of the parent element.\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // case: \"Vnode moved left\"\n      //\n      // We've found that the first node in our window on the new children is\n      // the same VNode as the _last_ node in our window on the old children.\n      // Visually, this is the layout of these two nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n      // (which will handle updating any changed attributes, reconciling their\n      // children etc) but we also need to move the DOM node to which\n      // `oldEndVnode` corresponds.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n      patch(oldEndVnode, newStartVnode);\n      // We've already checked above if `oldStartVnode` and `newStartVnode` are\n      // the same node, so since we're here we know that they are not. Thus we\n      // can move the element for `oldEndVnode` _before_ the element for\n      // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n      // future.\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // Here we do some checks to match up old and new nodes based on the\n      // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n      // in the JSX for a DOM element in the implementation of a Stencil\n      // component.\n      //\n      // First we check to see if there are any nodes in the array of old\n      // children which have the same key as the first node in the new\n      // children.\n      idxInOld = -1;\n      if (BUILD.vdomKey) {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n      if (BUILD.vdomKey && idxInOld >= 0) {\n        // We found a node in the old children which matches up with the first\n        // node in the new children! So let's deal with that\n        elmToMove = oldCh[idxInOld];\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          // the tag doesn't match so we'll need a new DOM element\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          // invalidate the matching old node so that we won't try to update it\n          // again later on\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // We either didn't find an element in the old children that matches\n        // the key of the first new child OR the build is not using `key`\n        // attributes at all. In either case we need to create a new element\n        // for the new node.\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        // if we created a new node then handle inserting it to the DOM\n        if (BUILD.slotRelocation) {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        } else {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    // we have some more new nodes to add which don't match up with old nodes\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (BUILD.updatable && newStartIdx > newEndIdx) {\n    // there are nodes in the `oldCh` array which no longer correspond to nodes\n    // in the new array, so lets remove them (which entails cleaning up the\n    // relevant DOM nodes)\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false positive and then have to do needless re-rendering.\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nvar isSameVnode = function isSameVnode(leftVNode, rightVNode) {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (leftVNode.$tag$ === rightVNode.$tag$) {\n    if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n      return leftVNode.$name$ === rightVNode.$name$;\n    }\n    // this will be set if components in the build have `key` attrs set on them\n    if (BUILD.vdomKey) {\n      return leftVNode.$key$ === rightVNode.$key$;\n    }\n    return true;\n  }\n  return false;\n};\nvar referenceNode = function referenceNode(node) {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\nvar parentReferenceNode = function parentReferenceNode(node) {\n  return (node['s-ol'] ? node['s-ol'] : node).parentNode;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nvar patch = function patch(oldVNode, newVNode) {\n  var elm = newVNode.$elm$ = oldVNode.$elm$;\n  var oldChildren = oldVNode.$children$;\n  var newChildren = newVNode.$children$;\n  var tag = newVNode.$tag$;\n  var text = newVNode.$text$;\n  var defaultHolder;\n  if (!BUILD.vdomText || text === null) {\n    if (BUILD.svg) {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    }\n    if (BUILD.vdomAttribute || BUILD.reflect) {\n      if (BUILD.slot && tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      // so we need to call `updateChildren` to reconcile them\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      }\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (BUILD.updatable && oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n    if (BUILD.svg && isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\nvar updateFallbackSlotVisibility = function updateFallbackSlotVisibility(elm) {\n  // tslint:disable-next-line: prefer-const\n  var childNodes = elm.childNodes;\n  var childNode;\n  var i;\n  var ilen;\n  var j;\n  var slotNameAttr;\n  var nodeType;\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n    if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn'];\n        // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n        childNode.hidden = false;\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1 /* NODE_TYPE.ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1 /* NODE_TYPE.ElementNode */ || nodeType === 3 /* NODE_TYPE.TextNode */ && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      }\n      // keep drilling down\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\nvar relocateNodes = [];\nvar relocateSlotContent = function relocateSlotContent(elm) {\n  // tslint:disable-next-line: prefer-const\n  var childNode;\n  var node;\n  var hostContentNodes;\n  var slotNameAttr;\n  var relocateNodeData;\n  var j;\n  var i = 0;\n  var childNodes = elm.childNodes;\n  var ilen = childNodes.length;\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(function (r) {\n              return r.$nodeToRelocate$ === node;\n            });\n            // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n            if (node['s-sr']) {\n              relocateNodes.map(function (relocateNode) {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(function (r) {\n                    return r.$nodeToRelocate$ === node;\n                  });\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(function (r) {\n            return r.$nodeToRelocate$ === node;\n          })) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n    if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\nvar isNodeLocatedInSlot = function isNodeLocatedInSlot(nodeToRelocate, slotNameAttr) {\n  if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n    return false;\n  }\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n  return slotNameAttr === '';\n};\nvar callNodeRefs = function callNodeRefs(vNode) {\n  if (BUILD.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\nvar renderVdom = function renderVdom(hostRef, renderFnResults) {\n  var hostElm = hostRef.$hostElement$;\n  var cmpMeta = hostRef.$cmpMeta$;\n  var oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  var rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  // <Host> runtime check\n  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(\"The <Host> must be the single root component.\\nLooks like the render() function of \\\"\".concat(hostTagName.toLowerCase(), \"\\\" is returning an array that contains the <Host>.\\n\\nThe render() function should look like this instead:\\n\\nrender() {\\n  // Do not return an array\\n  return (\\n    <Host>{content}</Host>\\n  );\\n}\\n  \"));\n  }\n  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        propName = _ref4[0],\n        attribute = _ref4[1];\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n  if (BUILD.scoped || BUILD.shadowDom) {\n    scopeId = hostElm['s-sc'];\n  }\n  if (BUILD.slotRelocation) {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n    // always reset\n    checkSlotFallbackVisibility = false;\n  }\n  // synchronous patch\n  patch(oldVNode, rootVnode);\n  if (BUILD.slotRelocation) {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      var relocateData;\n      var nodeToRelocate;\n      var orgLocationNode;\n      var parentNodeRef;\n      var insertBeforeNode;\n      var refNode;\n      var _i4 = 0;\n      for (; _i4 < relocateNodes.length; _i4++) {\n        relocateData = relocateNodes[_i4];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n      for (_i4 = 0; _i4 < relocateNodes.length; _i4++) {\n        relocateData = relocateNodes[_i4];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              }\n              // add it back to the dom but in its new home\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    }\n    // done moving nodes around\n    // allow the disconnect callback to work again\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    // always reset\n    relocateNodes.length = 0;\n  }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nvar slotReferenceDebugNode = function slotReferenceDebugNode(slotVNode) {\n  return doc.createComment(\"<slot\".concat(slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : '', \"> (host=\").concat(hostTagName.toLowerCase(), \")\"));\n};\nvar originalLocationDebugNode = function originalLocationDebugNode(nodeToRelocate) {\n  return doc.createComment(\"org-location for \" + (nodeToRelocate.localName ? \"<\".concat(nodeToRelocate.localName, \"> (host=\").concat(nodeToRelocate['s-hn'], \")\") : \"[\".concat(nodeToRelocate.textContent, \"]\")));\n};\nvar attachToAncestor = function attachToAncestor(hostRef, ancestorComponent) {\n  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(function (r) {\n      return hostRef.$onRenderResolve$ = r;\n    }));\n  }\n};\nvar scheduleUpdate = function scheduleUpdate(hostRef, isInitialLoad) {\n  if (BUILD.taskQueue && BUILD.updatable) {\n    hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n  }\n\n  if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n  var dispatch = function dispatch() {\n    return dispatchHooks(hostRef, isInitialLoad);\n  };\n  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nvar dispatchHooks = function dispatchHooks(hostRef, isInitialLoad) {\n  var elm = hostRef.$hostElement$;\n  var endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  var promise;\n  if (isInitialLoad) {\n    if (BUILD.lazyLoad && BUILD.hostListener) {\n      hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n            methodName = _ref6[0],\n            event = _ref6[1];\n          return safeCall(instance, methodName, event);\n        });\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n    emitLifecycleEvent(elm, 'componentWillLoad');\n    if (BUILD.cmpWillLoad) {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  } else {\n    emitLifecycleEvent(elm, 'componentWillUpdate');\n    if (BUILD.cmpWillUpdate) {\n      promise = safeCall(instance, 'componentWillUpdate');\n    }\n  }\n  emitLifecycleEvent(elm, 'componentWillRender');\n  if (BUILD.cmpWillRender) {\n    promise = then(promise, function () {\n      return safeCall(instance, 'componentWillRender');\n    });\n  }\n  endSchedule();\n  return then(promise, function () {\n    return updateComponent(hostRef, instance, isInitialLoad);\n  });\n};\nvar updateComponent = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hostRef, instance, isInitialLoad) {\n    var elm, endUpdate, rc, endRender, childrenPromises, postUpdate;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // updateComponent\n          elm = hostRef.$hostElement$;\n          endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n          rc = elm['s-rc'];\n          if (BUILD.style && isInitialLoad) {\n            // DOM WRITE!\n            attachStyles(hostRef);\n          }\n          endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n          if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n          }\n          if (!BUILD.hydrateServerSide) {\n            _context.next = 11;\n            break;\n          }\n          _context.next = 9;\n          return callRender(hostRef, instance, elm);\n        case 9:\n          _context.next = 12;\n          break;\n        case 11:\n          callRender(hostRef, instance, elm);\n        case 12:\n          if (BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.updateHost(elm);\n          }\n          if (BUILD.isDev) {\n            hostRef.$renderCount$++;\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n          }\n\n          if (BUILD.hydrateServerSide) {\n            try {\n              // manually connected child components during server-side hydrate\n              serverSideConnected(elm);\n              if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                  elm['s-en'] = '';\n                } else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n                  elm['s-en'] = 'c';\n                }\n              }\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          }\n          if (BUILD.asyncLoading && rc) {\n            // ok, so turns out there are some child host elements\n            // waiting on this parent element to load\n            // let's fire off all update callbacks waiting\n            rc.map(function (cb) {\n              return cb();\n            });\n            elm['s-rc'] = undefined;\n          }\n          endRender();\n          endUpdate();\n          if (BUILD.asyncLoading) {\n            childrenPromises = elm['s-p'];\n            postUpdate = function postUpdate() {\n              return postUpdateComponent(hostRef);\n            };\n            if (childrenPromises.length === 0) {\n              postUpdate();\n            } else {\n              Promise.all(childrenPromises).then(postUpdate);\n              hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n              childrenPromises.length = 0;\n            }\n          } else {\n            postUpdateComponent(hostRef);\n          }\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar callRender = function callRender(hostRef, instance, elm) {\n  // in order for bundlers to correctly treeshake the BUILD object\n  // we need to ensure BUILD is not deoptimized within a try/catch\n  // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n  var allRenderFn = BUILD.allRenderFn ? true : false;\n  var lazyLoad = BUILD.lazyLoad ? true : false;\n  var taskQueue = BUILD.taskQueue ? true : false;\n  var updatable = BUILD.updatable ? true : false;\n  try {\n    renderingRef = instance;\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n    }\n\n    if (BUILD.hasRenderFn || BUILD.reflect) {\n      if (BUILD.vdomRender || BUILD.reflect) {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        if (BUILD.hydrateServerSide) {\n          return Promise.resolve(instance).then(function (value) {\n            return renderVdom(hostRef, value);\n          });\n        } else {\n          renderVdom(hostRef, instance);\n        }\n      } else {\n        elm.textContent = instance;\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  renderingRef = null;\n  return null;\n};\nvar getRenderingRef = function getRenderingRef() {\n  return renderingRef;\n};\nvar postUpdateComponent = function postUpdateComponent(hostRef) {\n  var tagName = hostRef.$cmpMeta$.$tagName$;\n  var elm = hostRef.$hostElement$;\n  var endPostUpdate = createTime('postUpdate', tagName);\n  var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  var ancestorComponent = hostRef.$ancestorComponent$;\n  if (BUILD.cmpDidRender) {\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n\n    safeCall(instance, 'componentDidRender');\n    if (BUILD.isDev) {\n      hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentDidRender');\n  if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n    if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    if (BUILD.cmpDidLoad) {\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n      }\n\n      safeCall(instance, 'componentDidLoad');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidLoad');\n    endPostUpdate();\n    if (BUILD.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD.cmpDidUpdate) {\n      // we've already loaded this component\n      // fire off the user's componentDidUpdate method (if one was provided)\n      // componentDidUpdate runs AFTER render() has been called\n      // and all child components have finished updating\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n      }\n\n      safeCall(instance, 'componentDidUpdate');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidUpdate');\n    endPostUpdate();\n  }\n  if (BUILD.hotModuleReplacement) {\n    elm['s-hmr-load'] && elm['s-hmr-load']();\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  }\n  // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n  if (BUILD.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n    if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n      nextTick(function () {\n        return scheduleUpdate(hostRef, false);\n      });\n    }\n    hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n  }\n  // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nvar forceUpdate = function forceUpdate(ref) {\n  if (BUILD.updatable) {\n    var hostRef = getHostRef(ref);\n    var isConnected = hostRef.$hostElement$.isConnected;\n    if (isConnected && (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n      scheduleUpdate(hostRef, false);\n    }\n    // Returns \"true\" when the forced update was successfully scheduled\n    return isConnected;\n  }\n  return false;\n};\nvar appDidLoad = function appDidLoad(who) {\n  // on appload\n  // we have finish the first big initial render\n  if (BUILD.cssAnnotations) {\n    addHydratedFlag(doc.documentElement);\n  }\n  if (BUILD.asyncQueue) {\n    plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n  }\n\n  nextTick(function () {\n    return emitEvent(win, 'appload', {\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  });\n  if (BUILD.profile && performance.measure) {\n    performance.measure(\"[Stencil] \".concat(NAMESPACE, \" initial load (by \").concat(who, \")\"), 'st:app:start');\n  }\n};\nvar safeCall = function safeCall(instance, method, arg) {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  return undefined;\n};\nvar then = function then(promise, thenFn) {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nvar emitLifecycleEvent = function emitLifecycleEvent(elm, lifecycleName) {\n  if (BUILD.lifecycleDOMEvents) {\n    emitEvent(elm, 'stencil_' + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\nvar addHydratedFlag = function addHydratedFlag(elm) {\n  return BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined;\n};\nvar serverSideConnected = function serverSideConnected(elm) {\n  var children = elm.children;\n  if (children != null) {\n    for (var _i5 = 0, ii = children.length; _i5 < ii; _i5++) {\n      var childElm = children[_i5];\n      if (typeof childElm.connectedCallback === 'function') {\n        childElm.connectedCallback();\n      }\n      serverSideConnected(childElm);\n    }\n  }\n};\nvar getValue = function getValue(ref, propName) {\n  return getHostRef(ref).$instanceValues$.get(propName);\n};\nvar setValue = function setValue(ref, propName, newVal, cmpMeta) {\n  // check our new property value against our internal value\n  var hostRef = getHostRef(ref);\n  var elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n  var oldVal = hostRef.$instanceValues$.get(propName);\n  var flags = hostRef.$flags$;\n  var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n  // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n  var areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  var didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (BUILD.isDev) {\n      if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n        consoleDevWarn(\"The state/prop \\\"\".concat(propName, \"\\\" changed during rendering. This can potentially lead to infinite-loops and other bugs.\"), '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      } else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n        consoleDevWarn(\"The state/prop \\\"\".concat(propName, \"\\\" changed during \\\"componentDidLoad()\\\", this triggers extra re-renders, try to setup on \\\"componentWillLoad()\\\"\"), '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      }\n    }\n    if (!BUILD.lazyLoad || instance) {\n      // get an array of method names of watch functions to call\n      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n        var watchMethods = cmpMeta.$watchers$[propName];\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(function (watchMethodName) {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n      if (BUILD.updatable && (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n        if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        }\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nvar proxyComponent = function proxyComponent(Cstr, cmpMeta, flags) {\n  if (BUILD.member && cmpMeta.$members$) {\n    if (BUILD.watchCallback && Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    }\n    // It's better to have a const than two Object.entries()\n    var members = Object.entries(cmpMeta.$members$);\n    var prototype = Cstr.prototype;\n    members.map(function (_ref8) {\n      var _ref9 = _slicedToArray(_ref8, 2),\n        memberName = _ref9[0],\n        _ref9$ = _slicedToArray(_ref9[1], 1),\n        memberFlags = _ref9$[0];\n      if ((BUILD.prop || BUILD.state) && (memberFlags & 31 /* MEMBER_FLAGS.Prop */ || (!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */)) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get: function get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set: function set(newValue) {\n            // only during dev time\n            if (BUILD.isDev) {\n              var ref = getHostRef(this);\n              if (\n              // we are proxying the instance (not element)\n              (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n              // the element is not constructing\n              (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n              // the member is a prop\n              (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n              // the member is not mutable\n              (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                consoleDevWarn(\"@Prop() \\\"\".concat(memberName, \"\\\" on <\").concat(cmpMeta.$tagName$, \"> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability\"));\n              }\n            }\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      } else if (BUILD.lazyLoad && BUILD.method && flags & 1 /* PROXY_FLAGS.isElementConstructor */ && memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value: function value() {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            var ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(function () {\n              var _ref$$lazyInstance$;\n              return (_ref$$lazyInstance$ = ref.$lazyInstance$)[memberName].apply(_ref$$lazyInstance$, args);\n            });\n          }\n        });\n      }\n    });\n    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n      var attrNameToPropName = new Map();\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        var _this = this;\n        plt.jmp(function () {\n          var propName = attrNameToPropName.get(attrName);\n          //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n          if (_this.hasOwnProperty(propName)) {\n            newValue = _this[propName];\n            delete _this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof _this[propName] === 'number' && _this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n          _this[propName] = newValue === null && typeof _this[propName] === 'boolean' ? false : newValue;\n        });\n      };\n      // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n      Cstr.observedAttributes = members.filter(function (_ref10) {\n        var _ref11 = _slicedToArray(_ref10, 2),\n          _ = _ref11[0],\n          m = _ref11[1];\n        return m[0] & 15;\n      } /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n      .map(function (_ref12) {\n        var _ref13 = _slicedToArray(_ref12, 2),\n          propName = _ref13[0],\n          m = _ref13[1];\n        var attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n        if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n        return attrName;\n      });\n    }\n  }\n  return Cstr;\n};\nvar initializeComponent = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    var endLoad, endNewInstance, style, _scopeId, endRegisterStyles, ancestorComponent, schedule;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) && (hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0)) {\n            _context2.next = 37;\n            break;\n          }\n          if (!(BUILD.lazyLoad || BUILD.hydrateClientSide)) {\n            _context2.next = 22;\n            break;\n          }\n          // we haven't initialized this element yet\n          hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n          // lazy loaded components\n          // request the component's implementation to be\n          // wired up with the host element\n          Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n          if (!Cstr.then) {\n            _context2.next = 10;\n            break;\n          }\n          // Await creates a micro-task avoid if possible\n          endLoad = uniqueTime(\"st:load:\".concat(cmpMeta.$tagName$, \":\").concat(hostRef.$modeName$), \"[Stencil] Load module for <\".concat(cmpMeta.$tagName$, \">\"));\n          _context2.next = 8;\n          return Cstr;\n        case 8:\n          Cstr = _context2.sent;\n          endLoad();\n        case 10:\n          if (!((BUILD.isDev || BUILD.isDebug) && !Cstr)) {\n            _context2.next = 12;\n            break;\n          }\n          throw new Error(\"Constructor for \\\"\".concat(cmpMeta.$tagName$, \"#\").concat(hostRef.$modeName$, \"\\\" was not found\"));\n        case 12:\n          if (BUILD.member && !Cstr.isProxied) {\n            // we've never proxied this Constructor before\n            // let's add the getters/setters to its prototype before\n            // the first time we create an instance of the implementation\n            if (BUILD.watchCallback) {\n              cmpMeta.$watchers$ = Cstr.watchers;\n            }\n            proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n            Cstr.isProxied = true;\n          }\n          endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n          // but let's keep track of when we start and stop\n          // so that the getters/setters don't incorrectly step on data\n          if (BUILD.member) {\n            hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n          }\n          // construct the lazy-loaded component implementation\n          // passing the hostRef is very important during\n          // construction in order to directly wire together the\n          // host element and the lazy-loaded instance\n          try {\n            new Cstr(hostRef);\n          } catch (e) {\n            consoleError(e);\n          }\n          if (BUILD.member) {\n            hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n          }\n\n          if (BUILD.watchCallback) {\n            hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n          }\n\n          endNewInstance();\n          fireConnectedCallback(hostRef.$lazyInstance$);\n          _context2.next = 25;\n          break;\n        case 22:\n          // sync constructor component\n          Cstr = elm.constructor;\n          hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n          // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n          // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n          // Stencil has completed instantiating the component.\n          customElements.whenDefined(cmpMeta.$tagName$).then(function () {\n            return hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n          });\n        case 25:\n          if (!(BUILD.style && Cstr.style)) {\n            _context2.next = 37;\n            break;\n          }\n          // this component has styles but we haven't registered them yet\n          style = Cstr.style;\n          if (BUILD.mode && typeof style !== 'string') {\n            style = style[hostRef.$modeName$ = computeMode(elm)];\n            if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n              elm.setAttribute('s-mode', hostRef.$modeName$);\n            }\n          }\n          _scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n          if (styles.has(_scopeId)) {\n            _context2.next = 37;\n            break;\n          }\n          endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n          if (!(!BUILD.hydrateServerSide && BUILD.shadowDom && BUILD.shadowDomShim && cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */)) {\n            _context2.next = 35;\n            break;\n          }\n          _context2.next = 34;\n          return import('./shadow-css.js').then(function (m) {\n            return m.scopeCss(style, _scopeId, false);\n          });\n        case 34:\n          style = _context2.sent;\n        case 35:\n          registerStyle(_scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n          endRegisterStyles();\n        case 37:\n          // we've successfully created a lazy instance\n          ancestorComponent = hostRef.$ancestorComponent$;\n          schedule = function schedule() {\n            return scheduleUpdate(hostRef, true);\n          };\n          if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n            // this is the initial load and this component it has an ancestor component\n            // but the ancestor component has NOT fired its will update lifecycle yet\n            // so let's just cool our jets and wait for the ancestor to continue first\n            // this will get fired off when the ancestor component\n            // finally gets around to rendering its lazy self\n            // fire off the initial update\n            ancestorComponent['s-rc'].push(schedule);\n          } else {\n            schedule();\n          }\n        case 40:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function initializeComponent(_x4, _x5, _x6, _x7, _x8) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nvar fireConnectedCallback = function fireConnectedCallback(instance) {\n  if (BUILD.lazyLoad && BUILD.connectedCallback) {\n    safeCall(instance, 'connectedCallback');\n  }\n};\nvar _connectedCallback = function connectedCallback(elm) {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    var hostRef = getHostRef(elm);\n    var cmpMeta = hostRef.$cmpMeta$;\n    var endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    if (BUILD.hostListenerTargetParent) {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n    if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n      var hostId;\n      if (BUILD.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n        if (hostId) {\n          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            var _scopeId2 = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(_scopeId2 + '-h', _scopeId2 + '-s');\n          }\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n      if (BUILD.slotRelocation && !hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */)) {\n          setContentReference(elm);\n        }\n      }\n      if (BUILD.asyncLoading) {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        var ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(function (_ref15) {\n          var _ref16 = _slicedToArray(_ref15, 2),\n            memberName = _ref16[0],\n            _ref16$ = _slicedToArray(_ref16[1], 1),\n            memberFlags = _ref16$[0];\n          if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n            var value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      if (BUILD.initializeNextTick) {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(function () {\n          return initializeComponent(elm, hostRef, cmpMeta);\n        });\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n      // fire off connectedCallback() on component instance\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n    endConnected();\n  }\n};\nvar setContentReference = function setContentReference(elm) {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  var contentRefElm = elm['s-cr'] = doc.createComment(BUILD.isDebug ? \"content-ref (host=\".concat(elm.localName, \")\") : '');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\nvar _disconnectedCallback = function disconnectedCallback(elm) {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    var hostRef = getHostRef(elm);\n    var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    if (BUILD.hostListener) {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(function (rmListener) {\n          return rmListener();\n        });\n        hostRef.$rmListeners$ = undefined;\n      }\n    }\n    // clear CSS var-shim tracking\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n      plt.$cssShim$.removeHost(elm);\n    }\n    if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n      safeCall(instance, 'disconnectedCallback');\n    }\n    if (BUILD.cmpDidUnload) {\n      safeCall(instance, 'componentDidUnload');\n    }\n  }\n};\nvar defineCustomElement = function defineCustomElement(Cstr, compactMeta) {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nvar proxyCustomElement = function proxyCustomElement(Cstr, compactMeta) {\n  var cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n  if (BUILD.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n  if (BUILD.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n  if (BUILD.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n  if (BUILD.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n    cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n  }\n\n  var originalConnectedCallback = Cstr.prototype.connectedCallback;\n  var originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __registerHost: function __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n    connectedCallback: function connectedCallback() {\n      _connectedCallback(this);\n      if (BUILD.connectedCallback && originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n    disconnectedCallback: function disconnectedCallback() {\n      _disconnectedCallback(this);\n      if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    },\n    __attachShadow: function __attachShadow() {\n      if (supportsShadow) {\n        if (BUILD.shadowDelegatesFocus) {\n          this.attachShadow({\n            mode: 'open',\n            delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */)\n          });\n        } else {\n          this.attachShadow({\n            mode: 'open'\n          });\n        }\n      } else {\n        this.shadowRoot = this;\n      }\n    }\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\n\nvar forceModeUpdate = function forceModeUpdate(elm) {\n  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n    var mode = computeMode(elm);\n    var hostRef = getHostRef(elm);\n    if (hostRef.$modeName$ !== mode) {\n      var cmpMeta = hostRef.$cmpMeta$;\n      var oldScopeId = elm['s-sc'];\n      var _scopeId3 = getScopeId(cmpMeta, mode);\n      var style = elm.constructor.style[mode];\n      var flags = cmpMeta.$flags$;\n      if (style) {\n        if (!styles.has(_scopeId3)) {\n          registerStyle(_scopeId3, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n        }\n\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\nvar patchCloneNode = function patchCloneNode(HostElementPrototype) {\n  var orgCloneNode = HostElementPrototype.cloneNode;\n  HostElementPrototype.cloneNode = function (deep) {\n    var srcNode = this;\n    var isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    var clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n    if (BUILD.slot && !isShadowDom && deep) {\n      var _i6 = 0;\n      var slotted, nonStencilNode;\n      var stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n      for (; _i6 < srcNode.childNodes.length; _i6++) {\n        slotted = srcNode.childNodes[_i6]['s-nr'];\n        nonStencilNode = stencilPrivates.every(function (privateField) {\n          return !srcNode.childNodes[_i6][privateField];\n        });\n        if (slotted) {\n          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n        if (nonStencilNode) {\n          clonedNode.appendChild(srcNode.childNodes[_i6].cloneNode(true));\n        }\n      }\n    }\n    return clonedNode;\n  };\n};\nvar patchSlotAppendChild = function patchSlotAppendChild(HostElementPrototype) {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n  HostElementPrototype.appendChild = function (newChild) {\n    var slotName = newChild['s-sn'] = getSlotName(newChild);\n    var slotNode = getHostSlotNode(this.childNodes, slotName);\n    if (slotNode) {\n      var slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n      var appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n    }\n    return this.__appendChild(newChild);\n  };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nvar patchTextContent = function patchTextContent(hostElementPrototype, cmpMeta) {\n  if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n    var descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n    Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n    Object.defineProperty(hostElementPrototype, 'textContent', {\n      get: function get() {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        var slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n        // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n          return slotNode.nextSibling.textContent;\n        } else if (slotNode) {\n          return slotNode.textContent;\n        } else {\n          // fallback to the original implementation\n          return this.__textContent;\n        }\n      },\n      set: function set(value) {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        var slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n        // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n        // sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n          slotNode.nextSibling.textContent = value;\n        } else if (slotNode) {\n          slotNode.textContent = value;\n        } else {\n          // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n          // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n          // it there\n          this.__textContent = value;\n          var contentRefElm = this['s-cr'];\n          if (contentRefElm) {\n            this.insertBefore(contentRefElm, this.firstChild);\n          }\n        }\n      }\n    });\n  }\n};\nvar patchChildSlotNodes = function patchChildSlotNodes(elm, cmpMeta) {\n  var FakeNodeList = /*#__PURE__*/function (_Array) {\n    _inherits(FakeNodeList, _Array);\n    var _super = _createSuper(FakeNodeList);\n    function FakeNodeList() {\n      _classCallCheck(this, FakeNodeList);\n      return _super.apply(this, arguments);\n    }\n    _createClass(FakeNodeList, [{\n      key: \"item\",\n      value: function item(n) {\n        return this[n];\n      }\n    }]);\n    return FakeNodeList;\n  }( /*#__PURE__*/_wrapNativeSuper(Array));\n  if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n    var childNodesFn = elm.__lookupGetter__('childNodes');\n    Object.defineProperty(elm, 'children', {\n      get: function get() {\n        return this.childNodes.map(function (n) {\n          return n.nodeType === 1;\n        });\n      }\n    });\n    Object.defineProperty(elm, 'childElementCount', {\n      get: function get() {\n        return elm.children.length;\n      }\n    });\n    Object.defineProperty(elm, 'childNodes', {\n      get: function get() {\n        var childNodes = childNodesFn.call(this);\n        if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 && getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n          var result = new FakeNodeList();\n          for (var _i7 = 0; _i7 < childNodes.length; _i7++) {\n            var slot = childNodes[_i7]['s-nr'];\n            if (slot) {\n              result.push(slot);\n            }\n          }\n          return result;\n        }\n        return FakeNodeList.from(childNodes);\n      }\n    });\n  }\n};\nvar getSlotName = function getSlotName(node) {\n  return node['s-sn'] || node.nodeType === 1 && node.getAttribute('slot') || '';\n};\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nvar getHostSlotNode = function getHostSlotNode(childNodes, slotName) {\n  var i = 0;\n  var childNode;\n  for (; i < childNodes.length; i++) {\n    childNode = childNodes[i];\n    if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n      return childNode;\n    }\n    childNode = getHostSlotNode(childNode.childNodes, slotName);\n    if (childNode) {\n      return childNode;\n    }\n  }\n  return null;\n};\nvar getHostSlotChildNodes = function getHostSlotChildNodes(n, slotName) {\n  var childNodes = [n];\n  while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n    childNodes.push(n);\n  }\n  return childNodes;\n};\nvar hmrStart = function hmrStart(elm, cmpMeta, hmrVersionId) {\n  // ¯\\_(ツ)_/¯\n  var hostRef = getHostRef(elm);\n  // reset state flags to only have been connected\n  hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n  // TODO\n  // detatch any event listeners that may have been added\n  // because we're not passing an exact event name it'll\n  // remove all of this element's event, which is good\n  // create a callback for when this component finishes hmr\n  elm['s-hmr-load'] = function () {\n    // finished hmr for this element\n    delete elm['s-hmr-load'];\n  };\n  // re-initialize the component\n  initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nvar bootstrapLazy = function bootstrapLazy(lazyBundles) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (BUILD.profile && performance.mark) {\n    performance.mark('st:app:start');\n  }\n  installDevTools();\n  var endBootstrap = createTime('bootstrapLazy');\n  var cmpTags = [];\n  var exclude = options.exclude || [];\n  var customElements = win.customElements;\n  var head = doc.head;\n  var metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  var visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  var deferredConnectedCallbacks = [];\n  var styles = /*@__PURE__*/doc.querySelectorAll(\"[\".concat(HYDRATED_STYLE_ID, \"]\"));\n  var appLoadFallback;\n  var isBootstrapping = true;\n  var i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  if (BUILD.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n    }\n  }\n\n  if (BUILD.hydrateClientSide) {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n  }\n\n  if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n  lazyBundles.map(function (lazyBundle) {\n    lazyBundle[1].map(function (compactMeta) {\n      var cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = {};\n      }\n      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n      }\n\n      var tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n      var HostElement = /*#__PURE__*/function (_HTMLElement) {\n        _inherits(HostElement, _HTMLElement);\n        var _super2 = _createSuper(HostElement);\n        // StencilLazyHost\n        function HostElement(self) {\n          var _this2;\n          _classCallCheck(this, HostElement);\n          // @ts-ignore\n          _this2 = _super2.call(this, self);\n          self = _assertThisInitialized(_this2);\n          registerHost(self, cmpMeta);\n          if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            if (supportsShadow) {\n              if (BUILD.shadowDelegatesFocus) {\n                self.attachShadow({\n                  mode: 'open',\n                  delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */)\n                });\n              } else {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            } else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n              self.shadowRoot = self;\n            }\n          }\n          if (BUILD.slotChildNodesFix) {\n            patchChildSlotNodes(self, cmpMeta);\n          }\n          return _this2;\n        }\n        _createClass(HostElement, [{\n          key: \"connectedCallback\",\n          value: function connectedCallback() {\n            var _this3 = this;\n            if (appLoadFallback) {\n              clearTimeout(appLoadFallback);\n              appLoadFallback = null;\n            }\n            if (isBootstrapping) {\n              // connectedCallback will be processed once all components have been registered\n              deferredConnectedCallbacks.push(this);\n            } else {\n              plt.jmp(function () {\n                return _connectedCallback(_this3);\n              });\n            }\n          }\n        }, {\n          key: \"disconnectedCallback\",\n          value: function disconnectedCallback() {\n            var _this4 = this;\n            plt.jmp(function () {\n              return _disconnectedCallback(_this4);\n            });\n          }\n        }, {\n          key: \"componentOnReady\",\n          value: function componentOnReady() {\n            return getHostRef(this).$onReadyPromise$;\n          }\n        }]);\n        return HostElement;\n      }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n      if (BUILD.cloneNodeFix) {\n        patchCloneNode(HostElement.prototype);\n      }\n      if (BUILD.appendChildSlotFix) {\n        patchSlotAppendChild(HostElement.prototype);\n      }\n      if (BUILD.hotModuleReplacement) {\n        HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n          hmrStart(this, cmpMeta, hmrVersionId);\n        };\n      }\n      if (BUILD.scopedSlotTextContentFix) {\n        patchTextContent(HostElement.prototype, cmpMeta);\n      }\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n      }\n    });\n  });\n\n  if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  }\n  // Process deferred connectedCallbacks now all components have been registered\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(function (host) {\n      return host.connectedCallback();\n    });\n  } else {\n    if (BUILD.profile) {\n      plt.jmp(function () {\n        return appLoadFallback = setTimeout(appDidLoad, 30, 'timeout');\n      });\n    } else {\n      plt.jmp(function () {\n        return appLoadFallback = setTimeout(appDidLoad, 30);\n      });\n    }\n  }\n  // Fallback appLoad event\n  endBootstrap();\n};\nvar getConnect = function getConnect(_ref, tagName) {\n  var componentOnReady = function componentOnReady() {\n    var elm = doc.querySelector(tagName);\n    if (!elm) {\n      elm = doc.createElement(tagName);\n      doc.body.appendChild(elm);\n    }\n    return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n  };\n  var create = function create() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return componentOnReady().then(function (el) {\n      return el.create.apply(el, args);\n    });\n  };\n  return {\n    create: create,\n    componentOnReady: componentOnReady\n  };\n};\nvar getContext = function getContext(_elm, context) {\n  if (context in Context) {\n    return Context[context];\n  } else if (context === 'window') {\n    return win;\n  } else if (context === 'document') {\n    return doc;\n  } else if (context === 'isServer' || context === 'isPrerender') {\n    return BUILD.hydrateServerSide ? true : false;\n  } else if (context === 'isClient') {\n    return BUILD.hydrateServerSide ? false : true;\n  } else if (context === 'resourcesUrl' || context === 'publicPath') {\n    return getAssetPath('.');\n  } else if (context === 'queue') {\n    return {\n      write: writeTask,\n      read: readTask,\n      tick: {\n        then: function then(cb) {\n          return nextTick(cb);\n        }\n      }\n    };\n  }\n  return undefined;\n};\nvar Fragment = function Fragment(_, children) {\n  return children;\n};\nvar addHostEventListeners = function addHostEventListeners(elm, hostRef, listeners, attachParentListeners) {\n  if (BUILD.hostListener && listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    if (BUILD.hostListenerTargetParent) {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(function (_ref17) {\n          var _ref18 = _slicedToArray(_ref17, 1),\n            flags = _ref18[0];\n          return flags & 32;\n        } /* LISTENER_FLAGS.TargetParent */);\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(function (_ref19) {\n          var _ref20 = _slicedToArray(_ref19, 1),\n            flags = _ref20[0];\n          return !(flags & 32 /* LISTENER_FLAGS.TargetParent */);\n        });\n      }\n    }\n\n    listeners.map(function (_ref21) {\n      var _ref22 = _slicedToArray(_ref21, 3),\n        flags = _ref22[0],\n        name = _ref22[1],\n        method = _ref22[2];\n      var target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n      var handler = hostListenerProxy(hostRef, method);\n      var opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(function () {\n        return plt.rel(target, name, handler, opts);\n      });\n    });\n  }\n};\nvar hostListenerProxy = function hostListenerProxy(hostRef, methodName) {\n  return function (ev) {\n    try {\n      if (BUILD.lazyLoad) {\n        if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n          // instance is ready, let's call it's member method for this event\n          hostRef.$lazyInstance$[methodName](ev);\n        } else {\n          (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n        }\n      } else {\n        hostRef.$hostElement$[methodName](ev);\n      }\n    } catch (e) {\n      consoleError(e);\n    }\n  };\n};\nvar getHostListenerTarget = function getHostListenerTarget(elm, flags) {\n  if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */) return doc;\n  if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */) return win;\n  if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */) return doc.body;\n  if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */) return elm.parentElement;\n  return elm;\n};\n// prettier-ignore\nvar hostListenerOpts = function hostListenerOpts(flags) {\n  return supportsListenerOptions ? {\n    passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n    capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0\n  } : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n};\nvar setPlatformOptions = function setPlatformOptions(opts) {\n  return Object.assign(plt, opts);\n};\nvar insertVdomAnnotations = function insertVdomAnnotations(doc, staticComponents) {\n  if (doc != null) {\n    var docData = {\n      hostIds: 0,\n      rootLevelIds: 0,\n      staticComponents: new Set(staticComponents)\n    };\n    var orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach(function (orgLocationNode) {\n      if (orgLocationNode != null) {\n        var nodeRef = orgLocationNode['s-nr'];\n        var hostId = nodeRef['s-host-id'];\n        var nodeId = nodeRef['s-node-id'];\n        var childId = \"\".concat(hostId, \".\").concat(nodeId);\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = \"\".concat(hostId, \".\").concat(nodeId);\n          if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n          } else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n            if (hostId === 0) {\n              var textContent = nodeRef.nodeValue.trim();\n              if (textContent === '') {\n                // useless whitespace node at the document root\n                orgLocationNode.remove();\n                return;\n              }\n            }\n            var commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = \"\".concat(TEXT_NODE_ID, \".\").concat(childId);\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n        var orgLocationNodeId = \"\".concat(ORG_LOCATION_ID, \".\").concat(childId);\n        var orgLocationParentNode = orgLocationNode.parentElement;\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode['s-en'] === '') {\n            // ending with a \".\" means that the parent element\n            // of this node's original location is a SHADOW dom element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += \".\";\n          } else if (orgLocationParentNode['s-en'] === 'c') {\n            // ending with a \".c\" means that the parent element\n            // of this node's original location is a SCOPED element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += \".c\";\n          }\n        }\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\nvar parseVNodeAnnotations = function parseVNodeAnnotations(doc, node, docData, orgLocationNodes) {\n  if (node == null) {\n    return;\n  }\n  if (node['s-nr'] != null) {\n    orgLocationNodes.push(node);\n  }\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    node.childNodes.forEach(function (childNode) {\n      var hostRef = getHostRef(childNode);\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        var cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\nvar insertVNodeAnnotations = function insertVNodeAnnotations(doc, hostElm, vnode, docData, cmpData) {\n  if (vnode != null) {\n    var hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n    if (hostElm['s-cr'] != null) {\n      hostElm['s-cr'].nodeValue = \"\".concat(CONTENT_REF_ID, \".\").concat(hostId);\n    }\n    if (vnode.$children$ != null) {\n      var depth = 0;\n      vnode.$children$.forEach(function (vnodeChild, index) {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n      var parent = hostElm.parentElement;\n      if (parent && parent.childNodes) {\n        var parentChildNodes = Array.from(parent.childNodes);\n        var comment = parentChildNodes.find(function (node) {\n          return node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr'];\n        });\n        if (comment) {\n          var index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, \"\".concat(comment['s-host-id'], \".\").concat(comment['s-node-id'], \".0.\").concat(index));\n        }\n      }\n    }\n  }\n};\nvar insertChildVNodeAnnotations = function insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index) {\n  var childElm = vnodeChild.$elm$;\n  if (childElm == null) {\n    return;\n  }\n  var nodeId = cmpData.nodeIds++;\n  var childId = \"\".concat(hostId, \".\").concat(nodeId, \".\").concat(depth, \".\").concat(index);\n  childElm['s-host-id'] = hostId;\n  childElm['s-node-id'] = nodeId;\n  if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n  } else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n    var parentNode = childElm.parentNode;\n    var nodeName = parentNode.nodeName;\n    if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n      var textNodeId = \"\".concat(TEXT_NODE_ID, \".\").concat(childId);\n      var commentBeforeTextNode = doc.createComment(textNodeId);\n      parentNode.insertBefore(commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    if (childElm['s-sr']) {\n      var slotName = childElm['s-sn'] || '';\n      var slotNodeId = \"\".concat(SLOT_NODE_ID, \".\").concat(childId, \".\").concat(slotName);\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n  if (vnodeChild.$children$ != null) {\n    var childDepth = depth + 1;\n    vnodeChild.$children$.forEach(function (vnode, index) {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n    });\n  }\n};\nvar hostRefs = /*@__PURE__*/new WeakMap();\nvar getHostRef = function getHostRef(ref) {\n  return hostRefs.get(ref);\n};\nvar registerInstance = function registerInstance(lazyInstance, hostRef) {\n  return hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n};\nvar registerHost = function registerHost(elm, cmpMeta) {\n  var hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise(function (r) {\n      return hostRef.$onInstanceResolve$ = r;\n    });\n  }\n  if (BUILD.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise(function (r) {\n      return hostRef.$onReadyResolve$ = r;\n    });\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(elm, hostRef);\n};\nvar isMemberInElement = function isMemberInElement(elm, memberName) {\n  return memberName in elm;\n};\nvar consoleError = function consoleError(e, el) {\n  return (customError || console.error)(e, el);\n};\nvar STENCIL_DEV_MODE = BUILD.isTesting ? ['STENCIL:'] // E2E testing\n: ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\nvar consoleDevError = function consoleDevError() {\n  var _console;\n  for (var _len4 = arguments.length, m = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    m[_key4] = arguments[_key4];\n  }\n  return (_console = console).error.apply(_console, STENCIL_DEV_MODE.concat(m));\n};\nvar consoleDevWarn = function consoleDevWarn() {\n  var _console2;\n  for (var _len5 = arguments.length, m = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    m[_key5] = arguments[_key5];\n  }\n  return (_console2 = console).warn.apply(_console2, STENCIL_DEV_MODE.concat(m));\n};\nvar consoleDevInfo = function consoleDevInfo() {\n  var _console3;\n  for (var _len6 = arguments.length, m = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    m[_key6] = arguments[_key6];\n  }\n  return (_console3 = console).info.apply(_console3, STENCIL_DEV_MODE.concat(m));\n};\nvar setErrorHandler = function setErrorHandler(handler) {\n  return customError = handler;\n};\nvar cmpModules = /*@__PURE__*/new Map();\nvar loadModule = function loadModule(cmpMeta, hostRef, hmrVersionId) {\n  // loadModuleImport\n  var exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  var bundleId = cmpMeta.$lazyBundleId$;\n  if (BUILD.isDev && typeof bundleId !== 'string') {\n    consoleDevError(\"Trying to lazily load component <\".concat(cmpMeta.$tagName$, \"> with style mode \\\"\").concat(hostRef.$modeName$, \"\\\", but it does not exist.\"));\n    return undefined;\n  }\n  var module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n  return import(\n  /* @vite-ignore */\n  /* webpackInclude: /\\.entry\\.js$/ */\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n  /* webpackMode: \"lazy\" */\n  \"./\".concat(bundleId, \".entry.js\").concat(BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : '')).then(function (importedModule) {\n    if (!BUILD.hotModuleReplacement) {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\nvar styles = /*@__PURE__*/new Map();\nvar modeResolutionChain = [];\nvar win = typeof window !== 'undefined' ? window : {};\nvar CSS = BUILD.cssVarShim ? win.CSS : null;\nvar doc = win.document || {\n  head: {}\n};\nvar H = win.HTMLElement || /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n  return _createClass(_class);\n}();\nvar plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: function jmp(h) {\n    return h();\n  },\n  raf: function raf(h) {\n    return requestAnimationFrame(h);\n  },\n  ael: function ael(el, eventName, listener, opts) {\n    return el.addEventListener(eventName, listener, opts);\n  },\n  rel: function rel(el, eventName, listener, opts) {\n    return el.removeEventListener(eventName, listener, opts);\n  },\n  ce: function ce(eventName, opts) {\n    return new CustomEvent(eventName, opts);\n  }\n};\nvar setPlatformHelpers = function setPlatformHelpers(helpers) {\n  Object.assign(plt, helpers);\n};\nvar supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/function () {\n  return (doc.head.attachShadow + '').indexOf('[native') > -1;\n}() : true;\nvar supportsListenerOptions = /*@__PURE__*/function () {\n  var supportsListenerOptions = false;\n  try {\n    doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supportsListenerOptions = true;\n      }\n    }));\n  } catch (e) {}\n  return supportsListenerOptions;\n}();\nvar promiseResolve = function promiseResolve(v) {\n  return Promise.resolve(v);\n};\nvar supportsConstructableStylesheets = BUILD.constructableCSS ? /*@__PURE__*/function () {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === 'function';\n  } catch (e) {}\n  return false;\n}() : false;\nvar queueDomReads = [];\nvar queueDomWrites = [];\nvar queueDomWritesLow = [];\nvar queueTask = function queueTask(queue, write) {\n  return function (cb) {\n    queue.push(cb);\n    if (!queuePending) {\n      queuePending = true;\n      if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n        nextTick(flush);\n      } else {\n        plt.raf(flush);\n      }\n    }\n  };\n};\nvar consume = function consume(queue) {\n  for (var _i8 = 0; _i8 < queue.length; _i8++) {\n    try {\n      queue[_i8](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nvar consumeTimeout = function consumeTimeout(queue, timeout) {\n  var i = 0;\n  var ts = 0;\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\nvar flush = function flush() {\n  if (BUILD.asyncQueue) {\n    queueCongestion++;\n  }\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads);\n  // DOM WRITES!!!\n  if (BUILD.asyncQueue) {\n    var timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */ ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push.apply(queueDomWritesLow, queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\nvar nextTick = /*@__PURE__*/function nextTick(cb) {\n  return promiseResolve().then(cb);\n};\nvar readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nvar writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, _connectedCallback as connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, _disconnectedCallback as disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };","map":{"version":3,"names":["scopeId","contentRef","hostTagName","customError","i","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","renderingRef","queueCongestion","queuePending","BUILD","NAMESPACE","Build","isDev","isBrowser","isServer","isTesting","Context","getAssetPath","path","assetUrl","URL","plt","$resourcesUrl$","origin","win","location","href","pathname","setAssetPath","createTime","fnName","tagName","profile","performance","mark","key","measure","uniqueTime","measureText","getEntriesByName","length","inspect","ref","hostRef","getHostRef","undefined","flags","$flags$","hostElement","$hostElement$","renderCount","$renderCount$","hasRendered","hasConnected","isWaitingForChildren","isConstructingInstance","isQueuedForUpdate","hasInitializedComponent","hasLoadedComponent","isWatchReady","isListenReady","needsRerender","instanceValues","$instanceValues$","ancestorComponent","$ancestorComponent$","lazyInstance","$lazyInstance$","vnode","$vnode$","modeName","$modeName$","onReadyPromise","$onReadyPromise$","onReadyResolve","$onReadyResolve$","onInstancePromise","$onInstancePromise$","onInstanceResolve","$onInstanceResolve$","onRenderResolve","$onRenderResolve$","queuedListeners","$queuedListeners$","rmListeners","$rmListeners$","installDevTools","devTools","stencil","originalInspect","result","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","h","nodeName","vnodeData","child","slotName","simple","lastSimple","vNodeChildren","walk","c","Array","isArray","String","consoleDevError","$text$","push","newVNode","children","validateInputProperties","vdomKey","slotRelocation","name","vdomClass","classData","className","class","Object","keys","filter","k","join","some","isHost","vdomFunctional","vdomFnUtils","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","vdomAttribute","Host","node","forEach","cb","map","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","inputElm","props","value","indexOf","typeIndex","minIndex","maxIndex","stepIndex","consoleDevWarn","initializeClientHydrate","hostElm","hostId","endHydrate","shadowRoot","childRenderNodes","slotNodes","shadowRootNodes","shadowDom","$orgLocNodes$","initializeDocumentHydrate","doc","body","Map","removeAttribute","clientHydrate","orgLocationId","$hostId$","$nodeId$","orgLocationNode","get","supportsShadow","parentNode","insertBefore","nextSibling","delete","shadowRootNode","appendChild","parentVNode","childNodeType","childIdSplt","childVNode","nodeType","getAttribute","split","$depth$","$index$","toLowerCase","childNodes","nodeValue","textContent","remove","createElement","setAttribute","orgLocNodes","set","computeMode","elm","modeResolutionChain","find","m","setMode","handler","getMode","parsePropertyValue","propValue","propType","propBoolean","propNumber","parseFloat","propString","getElement","lazyLoad","createEvent","emit","detail","isConnected","emitEvent","bubbles","composed","cancelable","opts","ev","ce","dispatchEvent","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","addStyle","styleContainerNode","cmpMeta","mode","getScopeId","attachStyles","head","appliedStyles","styleElm","Set","has","hydrateClientSide","host","querySelector","innerHTML","cssVarShim","$cssShim$","createHostStyle","newScopeId","hydrateServerSide","hotModuleReplacement","add","constructableCSS","adoptedStyleSheets","includes","$cmpMeta$","endAttachStyles","$tagName$","getRootNode","scoped","cssAnnotations","classList","cmp","convertScopedToShadow","css","replace","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","oldClasses","parseClassList","newClasses","vdomStyle","updatable","prop","removeProperty","setProperty","vdomRef","vdomListener","__lookupSetter__","slice","rel","ael","vdomPropOrAttr","isComplex","n","e","xlink","vdomXlink","removeAttributeNS","setAttributeNS","parseClassListRegex","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","vdomText","createTextNode","isDebug","slotReferenceDebugNode","svg","createElementNS","putBackInOriginalLocation","recursive","oldSlotChildNodes","parentReferenceNode","referenceNode","addVnodes","before","vnodes","startIdx","endIdx","containerElm","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","leftVNode","rightVNode","oldChildren","newChildren","defaultHolder","reflect","slot","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","nodeToRelocate","vNode","renderVdom","renderFnResults","rootVnode","Error","$attrsToReflect$","propName","attribute","relocateData","parentNodeRef","insertBeforeNode","refNode","originalLocationDebugNode","previousSibling","slotVNode","createComment","localName","attachToAncestor","asyncLoading","Promise","scheduleUpdate","isInitialLoad","taskQueue","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","hostListener","methodName","event","safeCall","emitLifecycleEvent","cmpWillLoad","cmpWillUpdate","cmpWillRender","then","updateComponent","endUpdate","rc","endRender","callRender","updateHost","serverSideConnected","consoleError","childrenPromises","postUpdate","postUpdateComponent","all","allRenderFn","render","hasRenderFn","vdomRender","resolve","getRenderingRef","endPostUpdate","cmpDidRender","addHydratedFlag","cmpDidLoad","appDidLoad","cmpDidUpdate","method","nextTick","forceUpdate","who","documentElement","asyncQueue","namespace","arg","thenFn","lifecycleName","lifecycleDOMEvents","hydratedClass","hydratedAttribute","ii","childElm","connectedCallback","getValue","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","watchCallback","$watchers$","watchMethods","watchMethodName","cmpShouldUpdate","componentShouldUpdate","proxyComponent","Cstr","member","watchers","members","entries","prototype","memberFlags","state","defineProperty","configurable","enumerable","args","observeAttribute","attrNameToPropName","attributeChangedCallback","attrName","_oldValue","jmp","hasOwnProperty","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","constructor","customElements","whenDefined","endRegisterStyles","shadowDomShim","scopeCss","schedule","endConnected","hostListenerTargetParent","addHostEventListeners","$listeners$","setContentReference","hasAttribute","initializeNextTick","contentRefElm","firstChild","disconnectedCallback","rmListener","removeHost","cmpDidUnload","defineCustomElement","compactMeta","define","proxyCustomElement","originalConnectedCallback","originalDisconnectedCallback","__registerHost","registerHost","call","__attachShadow","shadowDelegatesFocus","attachShadow","delegatesFocus","is","forceModeUpdate","oldScopeId","patchCloneNode","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","slotted","nonStencilNode","stencilPrivates","every","privateField","appendChildSlotFix","__appendChild","patchSlotAppendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","patchTextContent","hostElementPrototype","descriptor","getOwnPropertyDescriptor","Node","_a","__textContent","patchChildSlotNodes","FakeNodeList","childNodesFn","__lookupGetter__","from","hmrStart","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","resourcesUrl","baseURI","syncQueue","lazyBundle","transformTagName","HostElement","self","slotChildNodesFix","clearTimeout","HTMLElement","cloneNodeFix","scopedSlotTextContentFix","$lazyBundleId$","invisiblePrehydration","setTimeout","getConnect","_ref","componentOnReady","create","el","getContext","_elm","context","write","read","readTask","tick","Fragment","listeners","attachParentListeners","target","hostListenerTarget","getHostListenerTarget","hostListenerProxy","hostListenerOpts","hostListenerTargetDocument","hostListenerTargetWindow","hostListenerTargetBody","parentElement","supportsListenerOptions","passive","capture","setPlatformOptions","insertVdomAnnotations","staticComponents","docData","hostIds","rootLevelIds","orgLocationNodes","parseVNodeAnnotations","nodeRef","nodeId","childId","commentBeforeTextNode","orgLocationNodeId","orgLocationParentNode","cmpData","nodeIds","insertVNodeAnnotations","depth","vnodeChild","index","insertChildVNodeAnnotations","parent","parentChildNodes","comment","textNodeId","slotNodeId","childDepth","hostRefs","registerInstance","console","error","STENCIL_DEV_MODE","warn","consoleDevInfo","info","setErrorHandler","cmpModules","exportName","bundleId","module","importedModule","window","CSS","document","H","raf","requestAnimationFrame","eventName","listener","addEventListener","removeEventListener","CustomEvent","setPlatformHelpers","helpers","promiseResolve","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","flush","consume","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","Env"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@stencil/core/internal/client/index.js"],"sourcesContent":["/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.21.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nconst Context = {};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n            hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n            isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n            needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    const style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* CMP_FLAGS.needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener &&\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* VNODE_FLAGS.isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* VNODE_FLAGS.isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // case: \"Vnode moved right\"\n            //\n            // We've found that the last node in our window on the new children is\n            // the same VNode as the _first_ node in our window on the old children\n            // we're dealing with now. Visually, this is the layout of these two\n            // nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n            // and move the DOM element for `oldStartVnode`.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // case: \"Vnode moved left\"\n            //\n            // We've found that the first node in our window on the new children is\n            // the same VNode as the _last_ node in our window on the old children.\n            // Visually, this is the layout of these two nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n            // (which will handle updating any changed attributes, reconciling their\n            // children etc) but we also need to move the DOM node to which\n            // `oldEndVnode` corresponds.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // Here we do some checks to match up old and new nodes based on the\n            // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n            // in the JSX for a DOM element in the implementation of a Stencil\n            // component.\n            //\n            // First we check to see if there are any nodes in the array of old\n            // children which have the same key as the first node in the new\n            // children.\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                // We found a node in the old children which matches up with the first\n                // node in the new children! So let's deal with that\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    // the tag doesn't match so we'll need a new DOM element\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    // invalidate the matching old node so that we won't try to update it\n                    // again later on\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false positive and then have to do needless re-rendering.\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n            return leftVNode.$name$ === rightVNode.$name$;\n        }\n        // this will be set if components in the build have `key` attrs set on them\n        if (BUILD.vdomKey) {\n            return leftVNode.$key$ === rightVNode.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    const childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ ||\n                            (nodeType === 3 /* NODE_TYPE.TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    const childNodes = elm.childNodes;\n    const ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        BUILD.isDebug || BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable &&\n                (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) &&\n                (memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad &&\n                BUILD.method &&\n                flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) &&\n        (hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */));\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide &&\n                    BUILD.shadowDom &&\n                    BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide ||\n                    ((BUILD.slot || BUILD.shadowDom) &&\n                        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        if (BUILD.cmpDidUnload) {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            const stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (BUILD.hotModuleReplacement) {\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            if (BUILD.scopedSlotTextContentFix) {\n                patchTextContent(HostElement.prototype, cmpMeta);\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then((el) => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in Context) {\n        return Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst Fragment = (_, children) => children;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* LISTENER_FLAGS.TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* LISTENER_FLAGS.TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n        capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0,\n    })\n    : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst modeResolutionChain = [];\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}