{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\nexport var addFetchListener = function addFetchListener() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$ignoreURLParamet = _ref.ignoreURLParametersMatching,\n    ignoreURLParametersMatching = _ref$ignoreURLParamet === void 0 ? [/^utm_/] : _ref$ignoreURLParamet,\n    _ref$directoryIndex = _ref.directoryIndex,\n    directoryIndex = _ref$directoryIndex === void 0 ? 'index.html' : _ref$directoryIndex,\n    _ref$cleanURLs = _ref.cleanURLs,\n    cleanURLs = _ref$cleanURLs === void 0 ? true : _ref$cleanURLs,\n    urlManipulation = _ref.urlManipulation;\n  var cacheName = cacheNames.getPrecacheName();\n  // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n  self.addEventListener('fetch', function (event) {\n    var precachedURL = getCacheKeyForURL(event.request.url, {\n      cleanURLs: cleanURLs,\n      directoryIndex: directoryIndex,\n      ignoreURLParametersMatching: ignoreURLParametersMatching,\n      urlManipulation: urlManipulation\n    });\n    if (!precachedURL) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Precaching did not find a match for \" + getFriendlyURL(event.request.url));\n      }\n      return;\n    }\n    var responsePromise = self.caches.open(cacheName).then(function (cache) {\n      return cache.match(precachedURL);\n    }).then(function (cachedResponse) {\n      if (cachedResponse) {\n        return cachedResponse;\n      }\n      // Fall back to the network if we don't have a cached response\n      // (perhaps due to manual cache cleanup).\n      if (process.env.NODE_ENV !== 'production') {\n        logger.warn(\"The precached response for \" + \"\".concat(getFriendlyURL(precachedURL), \" in \").concat(cacheName, \" was not found. \") + \"Falling back to the network instead.\");\n      }\n      return fetch(precachedURL);\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      responsePromise = responsePromise.then(function (response) {\n        // Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger.groupCollapsed(\"Precaching is responding to: \" + getFriendlyURL(event.request.url));\n        logger.log(\"Serving the precached url: \".concat(precachedURL));\n        logger.groupCollapsed(\"View request details here.\");\n        logger.log(event.request);\n        logger.groupEnd();\n        logger.groupCollapsed(\"View response details here.\");\n        logger.log(response);\n        logger.groupEnd();\n        logger.groupEnd();\n        return response;\n      });\n    }\n    event.respondWith(responsePromise);\n  });\n};","map":{"version":3,"names":["cacheNames","getFriendlyURL","logger","getCacheKeyForURL","addFetchListener","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","cacheName","getPrecacheName","self","addEventListener","event","precachedURL","request","url","process","env","NODE_ENV","debug","responsePromise","caches","open","then","cache","match","cachedResponse","warn","fetch","response","groupCollapsed","log","groupEnd","respondWith"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-precaching/utils/addFetchListener.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\n    const cacheName = cacheNames.getPrecacheName();\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', ((event) => {\n        const precachedURL = getCacheKeyForURL(event.request.url, {\n            cleanURLs,\n            directoryIndex,\n            ignoreURLParametersMatching,\n            urlManipulation,\n        });\n        if (!precachedURL) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(event.request.url));\n            }\n            return;\n        }\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\n            return cache.match(precachedURL);\n        }).then((cachedResponse) => {\n            if (cachedResponse) {\n                return cachedResponse;\n            }\n            // Fall back to the network if we don't have a cached response\n            // (perhaps due to manual cache cleanup).\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\n                    `Falling back to the network instead.`);\n            }\n            return fetch(precachedURL);\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            responsePromise = responsePromise.then((response) => {\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(`Precaching is responding to: ` +\n                    getFriendlyURL(event.request.url));\n                logger.log(`Serving the precached url: ${precachedURL}`);\n                logger.groupCollapsed(`View request details here.`);\n                logger.log(event.request);\n                logger.groupEnd();\n                logger.groupCollapsed(`View response details here.`);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n                return response;\n            });\n        }\n        event.respondWith(responsePromise);\n    }));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}