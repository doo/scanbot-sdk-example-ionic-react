{"ast":null,"code":"import _defineProperty from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { p as pointerCoord } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nvar segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:auto}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nvar segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nvar Segment = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n  var _super = _createSuper(_class);\n  function _class() {\n    var _this;\n    _classCallCheck(this, _class);\n    _this = _super.call(this);\n    _this.__registerHost();\n    _this.__attachShadow();\n    _this.ionChange = createEvent(_assertThisInitialized(_this), \"ionChange\", 7);\n    _this.ionSelect = createEvent(_assertThisInitialized(_this), \"ionSelect\", 7);\n    _this.ionStyle = createEvent(_assertThisInitialized(_this), \"ionStyle\", 7);\n    _this.didInit = false;\n    _this.activated = false;\n    /**\n     * If `true`, the user cannot interact with the segment.\n     */\n    _this.disabled = false;\n    /**\n     * If `true`, the segment buttons will overflow and the user can swipe to see them.\n     * In addition, this will disable the gesture to drag the indicator between the buttons\n     * in order to swipe to see hidden buttons.\n     */\n    _this.scrollable = false;\n    /**\n     * If `true`, users will be able to swipe between segment buttons to activate them.\n     */\n    _this.swipeGesture = true;\n    /**\n     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.\n     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.\n     */\n    _this.selectOnFocus = false;\n    _this.onClick = function (ev) {\n      var current = ev.target;\n      var previous = _this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      _this.value = current.value;\n      if (_this.scrollable || !_this.swipeGesture) {\n        if (previous) {\n          _this.checkButton(previous, current);\n        } else {\n          _this.setCheckedClasses();\n        }\n      }\n      _this.checked = current;\n    };\n    _this.getSegmentButton = function (selector) {\n      var _a, _b;\n      var buttons = _this.getButtons().filter(function (button) {\n        return !button.disabled;\n      });\n      var currIndex = buttons.findIndex(function (button) {\n        return button === document.activeElement;\n      });\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n    return _this;\n  }\n  _createClass(_class, [{\n    key: \"colorChanged\",\n    value: function colorChanged(value, oldValue) {\n      /**\n       * If color is set after not having\n       * previously been set (or vice versa),\n       * we need to emit style so the segment-buttons\n       * can apply their color classes properly.\n       */\n      if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n        this.emitStyle();\n      }\n    }\n  }, {\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      this.gestureChanged();\n    }\n  }, {\n    key: \"valueChanged\",\n    value: function valueChanged(value, oldValue) {\n      this.ionSelect.emit({\n        value: value\n      });\n      if (oldValue !== '' || this.didInit) {\n        if (!this.activated) {\n          this.ionChange.emit({\n            value: value\n          });\n        } else {\n          this.valueAfterGesture = value;\n        }\n      }\n      if (this.scrollable) {\n        var buttons = this.getButtons();\n        var activeButton = buttons.find(function (button) {\n          return button.value === value;\n        });\n        if (activeButton !== undefined) {\n          /**\n           * Scrollable segment buttons should be\n           * centered within the view including\n           * buttons that are partially offscreen.\n           */\n          activeButton.scrollIntoView({\n            behavior: 'smooth',\n            inline: 'center',\n            /**\n             * Segment should scroll on the\n             * horizontal axis. `block: 'nearest'`\n             * ensures that the vertical axis\n             * does not scroll if the segment\n             * as a whole is already in view.\n             */\n            block: 'nearest'\n          });\n        }\n      }\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      this.gestureChanged();\n      var buttons = this.getButtons();\n      var _iterator = _createForOfIteratorHelper(buttons),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          button.disabled = this.disabled;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"gestureChanged\",\n    value: function gestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.setCheckedClasses();\n              _context.next = 3;\n              return import('./index2.js');\n            case 3:\n              this.gesture = _context.sent.createGesture({\n                el: this.el,\n                gestureName: 'segment',\n                gesturePriority: 100,\n                threshold: 0,\n                passive: false,\n                onStart: function onStart(ev) {\n                  return _this2.onStart(ev);\n                },\n                onMove: function onMove(ev) {\n                  return _this2.onMove(ev);\n                },\n                onEnd: function onEnd(ev) {\n                  return _this2.onEnd(ev);\n                }\n              });\n              this.gestureChanged();\n              if (this.disabled) {\n                this.disabledChanged();\n              }\n              this.didInit = true;\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"onStart\",\n    value: function onStart(detail) {\n      this.activate(detail);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      this.setNextIndex(detail);\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(detail) {\n      this.setActivated(false);\n      var checkedValidButton = this.setNextIndex(detail, true);\n      detail.event.stopImmediatePropagation();\n      if (checkedValidButton) {\n        this.addRipple(detail);\n      }\n      var value = this.valueAfterGesture;\n      if (value !== undefined) {\n        this.ionChange.emit({\n          value: value\n        });\n        this.valueAfterGesture = undefined;\n      }\n    }\n  }, {\n    key: \"getButtons\",\n    value: function getButtons() {\n      return Array.from(this.el.querySelectorAll('ion-segment-button'));\n    }\n    /**\n     * The gesture blocks the segment button ripple. This\n     * function adds the ripple based on the checked segment\n     * and where the cursor ended.\n     */\n  }, {\n    key: \"addRipple\",\n    value: function addRipple(detail) {\n      var _this3 = this;\n      var useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n      if (!useRippleEffect) {\n        return;\n      }\n      var buttons = this.getButtons();\n      var checked = buttons.find(function (button) {\n        return button.value === _this3.value;\n      });\n      var root = checked.shadowRoot || checked;\n      var ripple = root.querySelector('ion-ripple-effect');\n      if (!ripple) {\n        return;\n      }\n      var _pointerCoord = pointerCoord(detail.event),\n        x = _pointerCoord.x,\n        y = _pointerCoord.y;\n      ripple.addRipple(x, y).then(function (remove) {\n        return remove();\n      });\n    }\n    /*\n     * Activate both the segment and the buttons\n     * due to a bug with ::slotted in Safari\n     */\n  }, {\n    key: \"setActivated\",\n    value: function setActivated(activated) {\n      var buttons = this.getButtons();\n      buttons.forEach(function (button) {\n        if (activated) {\n          button.classList.add('segment-button-activated');\n        } else {\n          button.classList.remove('segment-button-activated');\n        }\n      });\n      this.activated = activated;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(detail) {\n      var _this4 = this;\n      var clicked = detail.event.target;\n      var buttons = this.getButtons();\n      var checked = buttons.find(function (button) {\n        return button.value === _this4.value;\n      });\n      // Make sure we are only checking for activation on a segment button\n      // since disabled buttons will get the click on the segment\n      if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n        return;\n      }\n      // If there are no checked buttons, set the current button to checked\n      if (!checked) {\n        this.value = clicked.value;\n        this.setCheckedClasses();\n      }\n      // If the gesture began on the clicked button with the indicator\n      // then we should activate the indicator\n      if (this.value === clicked.value) {\n        this.setActivated(true);\n      }\n    }\n  }, {\n    key: \"getIndicator\",\n    value: function getIndicator(button) {\n      var root = button.shadowRoot || button;\n      return root.querySelector('.segment-button-indicator');\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(previous, current) {\n      var previousIndicator = this.getIndicator(previous);\n      var currentIndicator = this.getIndicator(current);\n      if (previousIndicator === null || currentIndicator === null) {\n        return;\n      }\n      var previousClientRect = previousIndicator.getBoundingClientRect();\n      var currentClientRect = currentIndicator.getBoundingClientRect();\n      var widthDelta = previousClientRect.width / currentClientRect.width;\n      var xPosition = previousClientRect.left - currentClientRect.left;\n      // Scale the indicator width to match the previous indicator width\n      // and translate it on top of the previous indicator\n      var transform = \"translate3d(\".concat(xPosition, \"px, 0, 0) scaleX(\").concat(widthDelta, \")\");\n      writeTask(function () {\n        // Remove the transition before positioning on top of the previous indicator\n        currentIndicator.classList.remove('segment-button-indicator-animated');\n        currentIndicator.style.setProperty('transform', transform);\n        // Force a repaint to ensure the transform happens\n        currentIndicator.getBoundingClientRect();\n        // Add the transition to move the indicator into place\n        currentIndicator.classList.add('segment-button-indicator-animated');\n        // Remove the transform to slide the indicator back to the button clicked\n        currentIndicator.style.setProperty('transform', '');\n      });\n      this.value = current.value;\n      this.setCheckedClasses();\n    }\n  }, {\n    key: \"setCheckedClasses\",\n    value: function setCheckedClasses() {\n      var _this5 = this;\n      var buttons = this.getButtons();\n      var index = buttons.findIndex(function (button) {\n        return button.value === _this5.value;\n      });\n      var next = index + 1;\n      // Keep track of the currently checked button\n      this.checked = buttons.find(function (button) {\n        return button.value === _this5.value;\n      });\n      var _iterator2 = _createForOfIteratorHelper(buttons),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var button = _step2.value;\n          button.classList.remove('segment-button-after-checked');\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (next < buttons.length) {\n        buttons[next].classList.add('segment-button-after-checked');\n      }\n    }\n  }, {\n    key: \"setNextIndex\",\n    value: function setNextIndex(detail) {\n      var _this6 = this;\n      var isEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var rtl = isRTL(this.el);\n      var activated = this.activated;\n      var buttons = this.getButtons();\n      var index = buttons.findIndex(function (button) {\n        return button.value === _this6.value;\n      });\n      var previous = buttons[index];\n      var current;\n      var nextIndex;\n      if (index === -1) {\n        return;\n      }\n      // Get the element that the touch event started on in case\n      // it was the checked button, then we will move the indicator\n      var rect = previous.getBoundingClientRect();\n      var left = rect.left;\n      var width = rect.width;\n      // Get the element that the gesture is on top of based on the currentX of the\n      // gesture event and the Y coordinate of the starting element, since the gesture\n      // can move up and down off of the segment\n      var currentX = detail.currentX;\n      var previousY = rect.top + rect.height / 2;\n      /**\n       * Segment can be used inside the shadow dom\n       * so doing document.elementFromPoint would never\n       * return a segment button in that instance.\n       * We use getRootNode to which will return the parent\n       * shadow root if used inside a shadow component and\n       * returns document otherwise.\n       */\n      var root = this.el.getRootNode();\n      var nextEl = root.elementFromPoint(currentX, previousY);\n      var decreaseIndex = rtl ? currentX > left + width : currentX < left;\n      var increaseIndex = rtl ? currentX < left : currentX > left + width;\n      // If the indicator is currently activated then we have started the gesture\n      // on top of the checked button so we need to slide the indicator\n      // by checking the button next to it as we move\n      if (activated && !isEnd) {\n        // Decrease index, move left in LTR & right in RTL\n        if (decreaseIndex) {\n          var newIndex = index - 1;\n          if (newIndex >= 0) {\n            nextIndex = newIndex;\n          }\n          // Increase index, moves right in LTR & left in RTL\n        } else if (increaseIndex) {\n          if (activated && !isEnd) {\n            var _newIndex = index + 1;\n            if (_newIndex < buttons.length) {\n              nextIndex = _newIndex;\n            }\n          }\n        }\n        if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n          current = buttons[nextIndex];\n        }\n      }\n      // If the indicator is not activated then we will just set the indicator\n      // to the element where the gesture ended\n      if (!activated && isEnd) {\n        current = nextEl;\n      }\n      if (current != null) {\n        /**\n         * If current element is ion-segment then that means\n         * user tried to select a disabled ion-segment-button,\n         * and we should not update the ripple.\n         */\n        if (current.tagName === 'ION-SEGMENT') {\n          return false;\n        }\n        if (previous !== current) {\n          this.checkButton(previous, current);\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        segment: true\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(ev) {\n      var rtl = isRTL(this.el);\n      var keyDownSelectsButton = this.selectOnFocus;\n      var current;\n      switch (ev.key) {\n        case 'ArrowRight':\n          ev.preventDefault();\n          current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n          break;\n        case 'ArrowLeft':\n          ev.preventDefault();\n          current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n          break;\n        case 'Home':\n          ev.preventDefault();\n          current = this.getSegmentButton('first');\n          break;\n        case 'End':\n          ev.preventDefault();\n          current = this.getSegmentButton('last');\n          break;\n        case ' ':\n        case 'Enter':\n          ev.preventDefault();\n          current = document.activeElement;\n          keyDownSelectsButton = true;\n      }\n      if (!current) {\n        return;\n      }\n      if (keyDownSelectsButton) {\n        var previous = this.checked || current;\n        this.checkButton(previous, current);\n      }\n      current.setFocus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _createColorClasses;\n      var mode = getIonMode(this);\n      return h(Host, {\n        role: \"tablist\",\n        onClick: this.onClick,\n        class: createColorClasses(this.color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, 'in-toolbar', hostContext('ion-toolbar', this.el)), _defineProperty(_createColorClasses, 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), _defineProperty(_createColorClasses, 'segment-activated', this.activated), _defineProperty(_createColorClasses, 'segment-disabled', this.disabled), _defineProperty(_createColorClasses, 'segment-scrollable', this.scrollable), _createColorClasses))\n      }, h(\"slot\", null));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"color\": [\"colorChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return {\n        ios: segmentIosCss,\n        md: segmentMdCss\n      };\n    }\n  }]);\n  return _class;\n}(HTMLElement), [33, \"ion-segment\", {\n  \"color\": [513],\n  \"disabled\": [4],\n  \"scrollable\": [4],\n  \"swipeGesture\": [4, \"swipe-gesture\"],\n  \"value\": [1025],\n  \"selectOnFocus\": [4, \"select-on-focus\"],\n  \"activated\": [32]\n}, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-segment\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-segment\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Segment);\n        }\n        break;\n    }\n  });\n}\nvar IonSegment = Segment;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonSegment, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","writeTask","h","Host","c","config","b","getIonMode","p","pointerCoord","i","isRTL","createColorClasses","hostContext","segmentIosCss","segmentMdCss","Segment","__registerHost","__attachShadow","ionChange","ionSelect","ionStyle","didInit","activated","disabled","scrollable","swipeGesture","selectOnFocus","onClick","ev","current","target","previous","checked","tagName","value","checkButton","setCheckedClasses","getSegmentButton","selector","_a","_b","buttons","getButtons","filter","button","currIndex","findIndex","document","activeElement","length","oldValue","undefined","emitStyle","gestureChanged","emit","valueAfterGesture","activeButton","find","scrollIntoView","behavior","inline","block","gesture","enable","createGesture","el","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","disabledChanged","detail","activate","setNextIndex","setActivated","checkedValidButton","event","stopImmediatePropagation","addRipple","Array","from","querySelectorAll","useRippleEffect","getBoolean","root","shadowRoot","ripple","querySelector","x","y","then","remove","forEach","classList","add","clicked","previousIndicator","getIndicator","currentIndicator","previousClientRect","getBoundingClientRect","currentClientRect","widthDelta","width","xPosition","left","transform","style","setProperty","index","next","isEnd","rtl","nextIndex","rect","currentX","previousY","top","height","getRootNode","nextEl","elementFromPoint","decreaseIndex","increaseIndex","newIndex","segment","keyDownSelectsButton","key","preventDefault","setFocus","mode","role","class","color","ios","md","defineCustomElement$1","customElements","components","get","define","IonSegment","defineCustomElement"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@ionic/core/components/ion-segment.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { p as pointerCoord } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\n\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:auto}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\n\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\n\nconst Segment = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.didInit = false;\n    this.activated = false;\n    /**\n     * If `true`, the user cannot interact with the segment.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the segment buttons will overflow and the user can swipe to see them.\n     * In addition, this will disable the gesture to drag the indicator between the buttons\n     * in order to swipe to see hidden buttons.\n     */\n    this.scrollable = false;\n    /**\n     * If `true`, users will be able to swipe between segment buttons to activate them.\n     */\n    this.swipeGesture = true;\n    /**\n     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.\n     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.\n     */\n    this.selectOnFocus = false;\n    this.onClick = (ev) => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        }\n        else {\n          this.setCheckedClasses();\n        }\n      }\n      this.checked = current;\n    };\n    this.getSegmentButton = (selector) => {\n      var _a, _b;\n      const buttons = this.getButtons().filter((button) => !button.disabled);\n      const currIndex = buttons.findIndex((button) => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n  }\n  colorChanged(value, oldValue) {\n    /**\n     * If color is set after not having\n     * previously been set (or vice versa),\n     * we need to emit style so the segment-buttons\n     * can apply their color classes properly.\n     */\n    if ((oldValue === undefined && value !== undefined) || (oldValue !== undefined && value === undefined)) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value, oldValue) {\n    this.ionSelect.emit({ value });\n    if (oldValue !== '' || this.didInit) {\n      if (!this.activated) {\n        this.ionChange.emit({ value });\n      }\n      else {\n        this.valueAfterGesture = value;\n      }\n    }\n    if (this.scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find((button) => button.value === value);\n      if (activeButton !== undefined) {\n        /**\n         * Scrollable segment buttons should be\n         * centered within the view including\n         * buttons that are partially offscreen.\n         */\n        activeButton.scrollIntoView({\n          behavior: 'smooth',\n          inline: 'center',\n          /**\n           * Segment should scroll on the\n           * horizontal axis. `block: 'nearest'`\n           * ensures that the vertical axis\n           * does not scroll if the segment\n           * as a whole is already in view.\n           */\n          block: 'nearest',\n        });\n      }\n    }\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    const buttons = this.getButtons();\n    for (const button of buttons) {\n      button.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.setCheckedClasses();\n    this.gesture = (await import('./index2.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: (ev) => this.onStart(ev),\n      onMove: (ev) => this.onMove(ev),\n      onEnd: (ev) => this.onEnd(ev),\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    this.didInit = true;\n  }\n  onStart(detail) {\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    const checkedValidButton = this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    if (checkedValidButton) {\n      this.addRipple(detail);\n    }\n    const value = this.valueAfterGesture;\n    if (value !== undefined) {\n      this.ionChange.emit({ value });\n      this.valueAfterGesture = undefined;\n    }\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  /**\n   * The gesture blocks the segment button ripple. This\n   * function adds the ripple based on the checked segment\n   * and where the cursor ended.\n   */\n  addRipple(detail) {\n    const useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n    if (!useRippleEffect) {\n      return;\n    }\n    const buttons = this.getButtons();\n    const checked = buttons.find((button) => button.value === this.value);\n    const root = checked.shadowRoot || checked;\n    const ripple = root.querySelector('ion-ripple-effect');\n    if (!ripple) {\n      return;\n    }\n    const { x, y } = pointerCoord(detail.event);\n    ripple.addRipple(x, y).then((remove) => remove());\n  }\n  /*\n   * Activate both the segment and the buttons\n   * due to a bug with ::slotted in Safari\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach((button) => {\n      if (activated) {\n        button.classList.add('segment-button-activated');\n      }\n      else {\n        button.classList.remove('segment-button-activated');\n      }\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find((button) => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex((button) => button.value === this.value);\n    const next = index + 1;\n    // Keep track of the currently checked button\n    this.checked = buttons.find((button) => button.value === this.value);\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  setNextIndex(detail, isEnd = false) {\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex((button) => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\n     * Segment can be used inside the shadow dom\n     * so doing document.elementFromPoint would never\n     * return a segment button in that instance.\n     * We use getRootNode to which will return the parent\n     * shadow root if used inside a shadow component and\n     * returns document otherwise.\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      }\n      else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\n       * If current element is ion-segment then that means\n       * user tried to select a disabled ion-segment-button,\n       * and we should not update the ripple.\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true,\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked || current;\n      this.checkButton(previous, current);\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { role: \"tablist\", onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable,\n      }) }, h(\"slot\", null)));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"color\": [\"colorChanged\"],\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"value\": [\"valueChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n  static get style() { return {\n    ios: segmentIosCss,\n    md: segmentMdCss\n  }; }\n}, [33, \"ion-segment\", {\n    \"color\": [513],\n    \"disabled\": [4],\n    \"scrollable\": [4],\n    \"swipeGesture\": [4, \"swipe-gesture\"],\n    \"value\": [1025],\n    \"selectOnFocus\": [4, \"select-on-focus\"],\n    \"activated\": [32]\n  }, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-segment\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-segment\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Segment);\n      }\n      break;\n  } });\n}\n\nconst IonSegment = Segment;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonSegment, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}