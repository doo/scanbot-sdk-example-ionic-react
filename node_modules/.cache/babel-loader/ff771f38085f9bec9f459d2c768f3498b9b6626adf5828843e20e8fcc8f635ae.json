{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nvar CacheFirst = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  function CacheFirst() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, CacheFirst);\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  _createClass(CacheFirst, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var event, request, logs, response, error, _iterator, _step, log;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              event = _ref.event, request = _ref.request;\n              logs = [];\n              if (typeof request === 'string') {\n                request = new Request(request);\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                assert.isInstance(request, Request, {\n                  moduleName: 'workbox-strategies',\n                  className: 'CacheFirst',\n                  funcName: 'makeRequest',\n                  paramName: 'request'\n                });\n              }\n              _context.next = 6;\n              return cacheWrapper.match({\n                cacheName: this._cacheName,\n                request: request,\n                event: event,\n                matchOptions: this._matchOptions,\n                plugins: this._plugins\n              });\n            case 6:\n              response = _context.sent;\n              if (response) {\n                _context.next = 21;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"No response found in the '\".concat(this._cacheName, \"' cache. \") + \"Will respond with a network request.\");\n              }\n              _context.prev = 9;\n              _context.next = 12;\n              return this._getFromNetwork(request, event);\n            case 12:\n              response = _context.sent;\n              _context.next = 18;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](9);\n              error = _context.t0;\n            case 18:\n              if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                  logs.push(\"Got response from network.\");\n                } else {\n                  logs.push(\"Unable to get a response from the network.\");\n                }\n              }\n              _context.next = 22;\n              break;\n            case 21:\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"Found a cached response in the '\".concat(this._cacheName, \"' cache.\"));\n              }\n            case 22:\n              if (process.env.NODE_ENV !== 'production') {\n                logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n                _iterator = _createForOfIteratorHelper(logs);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    log = _step.value;\n                    logger.log(log);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                messages.printFinalResponse(response);\n                logger.groupEnd();\n              }\n              if (response) {\n                _context.next = 25;\n                break;\n              }\n              throw new WorkboxError('no-response', {\n                url: request.url,\n                error: error\n              });\n            case 25:\n              return _context.abrupt(\"return\", response);\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[9, 15]]);\n      }));\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n  }, {\n    key: \"_getFromNetwork\",\n    value: function () {\n      var _getFromNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, event) {\n        var response, responseClone, cachePutPromise;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetchWrapper.fetch({\n                request: request,\n                event: event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins\n              });\n            case 2:\n              response = _context2.sent;\n              // Keep the service worker while we put the request to the cache\n              responseClone = response.clone();\n              cachePutPromise = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request: request,\n                response: responseClone,\n                event: event,\n                plugins: this._plugins\n              });\n              if (event) {\n                try {\n                  event.waitUntil(cachePutPromise);\n                } catch (error) {\n                  if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache for '\".concat(getFriendlyURL(request.url), \"'.\"));\n                  }\n                }\n              }\n              return _context2.abrupt(\"return\", response);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _getFromNetwork(_x2, _x3) {\n        return _getFromNetwork2.apply(this, arguments);\n      }\n      return _getFromNetwork;\n    }()\n  }]);\n  return CacheFirst;\n}();\nexport { CacheFirst };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","CacheFirst","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","_fetchOptions","fetchOptions","_matchOptions","matchOptions","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","match","response","push","_getFromNetwork","error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","fetch","responseClone","clone","cachePutPromise","put","waitUntil","warn"],"sources":["/Users/chanduranwala/Scanbot/ionic/scanbot-sdk-example-ionic-react/node_modules/workbox-strategies/CacheFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheFirst',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await this._getFromNetwork(request, event);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork(request, event) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        // Keep the service worker while we put the request to the cache\n        const responseClone = response.clone();\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: responseClone,\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}